---
title: "SDWIS Trends"
author: "Michael Pennino"
date: "Monday, August 22, 2016"
output: html_document
editor_options: 
  chunk_output_type: console
---


# Notes
* SDWIS = Safe Drinking Water Information System (A database of U.S. Drinking Water Violations created by the EPA)
* This script can be used to analyze and visual temporal and spatial patterns in U.S. drinking water violations
* PWS = Public Water System
* MCL = Maximum Contaminant Level = 10 mg/L for NO3
* Data Downloaded from SDWIS Federal Reports Advanced Search: 
*   1. https://ofmpub.epa.gov/apex/sfdw/f?p=108:9:::NO::P9_REPORT:VIO
*   2. Report = Violations,
*   3. Submission Year = 2017, Quarter = 1, NPM Candidate = All
*   4. EPA Region = All Regions
*   5. Violations Filters = Violation
*   6. Violation  =  (01) Maximum Contaminant Level Violation, Single Sample, 25823 Rows
*   7. Violation  =  (02) Maximum Contaminant Level Violation, Average Sample, 110615 Rows
*   8. Water System Characteristics: Activity States = All

######
# Reading in and manipulating data
```{r, warning=FALSE, message=FALSE, , echo=FALSE, eval=TRUE }


m_dir = '...'



##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##
# using the all contaminants datafiles
##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##
all_avg = read.csv(paste0(m_dir,"Projects/SDWIS/All_Contaminants/Violations_MCL_ALL_Contaminants_Average_ActiveInactive.csv"))  
all_single = read.csv(paste0(m_dir,"Projects/SDWIS/All_Contaminants/Violations_MCL_ALL_Contaminants_Single_ActiveInactive.csv"))  
SDWIS1 = rbind(all_avg,all_single) # the warning if from column "Violation.Measure"
names(SDWIS1)[1] = "PWSID"
##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##
##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##::<>::##


# Creating date column in the correct format
SDWIS1$DATE = as.Date(SDWIS1$Compliance.Period.Begin.Date, format = "%d-%B-%y")

#Add YEAR column
library(lubridate) 
SDWIS1$YEAR = year(SDWIS1$DATE)


```


# Keep Conterminous States Only
```{r Keep Conterminous States Only}

levels(factor(SDWIS1$Primacy.Agency))

# Remove Alaska, HI, etc. 

SDWIS <- subset(SDWIS1, !Primacy.Agency%in%c("Alaska","Hawaii","Puerto Rico","US Virgin Islands","Guam","American Samoa","Northern Mariana Islands")) 

levels(factor(SDWIS$Primacy.Agency))


# Combine Nitrate and Nitrate-Nitrate as one variable
SDWIS$Contaminant = SDWIS$Contaminant.Name

# change value so that both "Nitrate"="NO3" & "Nitrate-Nitrite"="NO3"
library(plyr) # new name is on right
SDWIS$Contaminant = revalue(SDWIS$Contaminant, 
                                c("Nitrate"="NO3","Nitrate-Nitrite"="NO3"))
detach(package:plyr) 



```


# Select Contaminant
```{r}

# For regulation Information for each constituent:
# https://www.ecfr.gov/cgi-bin/text-idx?SID=276258188c64033cb302c0d165c57c7f&mc=true&node=pt40.25.141&rgn=div5#se40.25.141_12

# See:
# ยง141.64   Maximum contaminant levels for disinfection byproducts.
# ยง141.23   Inorganic chemical sampling and analytical requirements.

#()()()()()()()()()()()()()()()()()()()()()()()()
# Choose Starting YEAR
CONSTITUENT = "NO3"

# Choose Constituent (the Start year in parenthese)
# NO3 (1994), Arsenic (2006), Cadmium (1994), Chromium (1994), Mercury(1994), Nickel(1994)

# Disinfectant Biproducts: 
# TTHM (2004), Total Haloacetic Acids (HAA5) (2004), Chlorite (2004), Bromate (2004)

#()()()()()()()()()()()()()()()()()()()()()()()()



# Subset out just the Specific CONSTITUENT
SDWIS = SDWIS_all[SDWIS_all$Contaminant == CONSTITUENT,]

# Add quarter
SDWIS$QUARTER = quarter(SDWIS$DATE)
# head(SDWISYY[8000:23099,c('DATE',"QUARTER")])



```



# INVENTORIES 
* Import Inventory Data for number of active drinking water systems
```{r Inventories}
# From Kevin Roland (this is # active at end of year)
# invent_pws94 = read.csv(paste0(m_dir,"Projects/SDWIS/Inventory_PWS_Systems_per_Year94.csv"))  # read csv file
# pws94 = invent_pws94
# names(pws94) <-  c("YEAR","Systems","Total.Pop.Served")


# Inventory for PWS Type (1994-2016)
inventoryPWS = read.csv(paste0(m_dir,'Projects/SDWIS/Inventory_by_PWS_type_State_1994_2016.csv'))  # read csv file


# Inventory for PWS Type (1994-2016)
invent_PWS_TYPE = read.csv(paste0(m_dir,'Projects/SDWIS/Inventory_PWS_TYPE_1994-2016.csv'))  # read csv file


# inventory for GW and SW (includes number active at some point during FY)
invent_gwsw = read.csv(paste0(m_dir,"Projects/SDWIS/Inventory_SDWIS_GW_SW.csv"))
names(invent_gwsw)[1] = "YEAR"

# Creating subset of inventory to use later
pws94 = invent_gwsw[,c("YEAR","Total_Syst","Total_PopServed")]
names(pws94) <-  c("YEAR","Systems","Total.Pop.Served")



```



# NUMBER OF VIOLATIONS PER YEAR
```{r Number of violations 1978-2016}
# for all years
SDWIS <- SDWIS[SDWIS$YEAR > 1978 & SDWIS$YEAR <= 2016,] 
summary(SDWIS$YEAR)

uniq_pws = SDWIS[,c("PWSID","YEAR","Population.Served.Count.Vio","EPA.Region","Primacy.Agency","PWS.Type","GW.or.SW","Owner.Type")]
names(uniq_pws)[3] = "Pop_Violated"
uniq_pws = unique(uniq_pws) 

library(ggplot2)
ggplot(data=uniq_pws, aes(uniq_pws$YEAR)) + 
  geom_histogram(binwidth = 1, col = "black")+
  #ggtitle( "Total Number of Systems in Violation for Nitrate")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  labs(x="",y="Number of Systems in Violation")+
  scale_y_continuous(breaks= seq(0, 600, by = 100),expand = c(0, 0))+
  scale_x_continuous(breaks= seq(1980, 2016, by = 2))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines


```

# Subset 1994-2016 & plot violations per year
```{r Violations per year 1994-2016}

SDWIS94 <- SDWIS[SDWIS$YEAR >= 1994 & SDWIS$YEAR <= 2016,]
uniq_pws94 = SDWIS94[,c("PWSID","YEAR","Population.Served.Count.Vio","EPA.Region","Primacy.Agency","PWS.Type","GW.or.SW","Owner.Type")]
names(uniq_pws94)[3] = "Pop_Violated"
uniq_pws94 = unique(uniq_pws94) 

# Calculating the number of violations and PWSIDs
SDWIS94$Inactive = ifelse(SDWIS94$Activity.Status == 'Active',0,1)

active94 = SDWIS94[SDWIS94$Activity.Status == 'Active',]
inactive94 = SDWIS94[SDWIS94$Activity.Status == 'Inactive',]
nrow(active94) # 18369
nrow(inactive94) # 3376
nrow(active94)+ nrow(inactive94) #= 21745

active94_unq = unique(active94[,c("PWSID","YEAR")])
inactive94_unq = unique(inactive94[,c("PWSID","YEAR")])
nrow(active94_unq) # 9449, number of unique annual violations for currently active
nrow(inactive94_unq) # 2168
nrow(active94_unq)+nrow(inactive94_unq) # total unique systems in violation from 1994-2016

nrow(as.data.frame(unique(active94_unq$PWSID))) # 3529, unique PWSIDS
nrow(as.data.frame(unique(inactive94_unq$PWSID))) # 1138, unique PWSIDS
3529+1138 #= 4667

sum(SDWIS94$Inactive) # 4635
nrow(SDWIS94) # 23004


# Plot
# barplot(table(uniq_pws94$YEAR), ylab="Violations",las=1,
#         main="Number of NO3 Violations Over Time 1994-2015")

ggplot(data=uniq_pws94, aes(uniq_pws94$YEAR)) + 
  geom_histogram(binwidth = 1, col = "black")+
  ggtitle( expression(paste("Total Number of ",NO[3]^{textstyle("-")} ,' Violations each year')))+
  labs(x="",y="Number of Systems in Violation")+
  scale_y_continuous(breaks= seq(0, 500, by = 100))+
  scale_x_continuous(breaks= seq(1994, 2015, by = 1),expand = c(0, 0))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30,hjust=0.5))

# Checking Numbers for specific years
SDWIS1994 = uniq_pws94[uniq_pws94$YEAR == 1994,]
SDWIS2010 = uniq_pws94[uniq_pws94$YEAR == 2010,]
SDWIS2015 = uniq_pws94[uniq_pws94$YEAR == 2015,]


```

# Percent of Water systems in violation 1994-2016
```{r percent in violation}
# creates table with freq for each row corresponding to each year. 
viol94 = as.data.frame(table(uniq_pws94$YEAR)) 
names(viol94) <-  c("YEAR","Freq")

viol94_pws <- merge(viol94,pws94,by="YEAR") # Mergining pwsPWS (from Kevin Roland) onto viol

# Calculating percent in PWS in violation
viol94_pws$perc = 100*viol94_pws$Freq / viol94_pws$Systems



# % in violations using the inventory based on # systems active for at least part of year
viol94_pws = merge(viol94_pws, invent_gwsw, by="YEAR")

viol94_pws$perc_new = 100*viol94_pws$Freq / viol94_pws$Total_Syst

ggplot(data=viol94_pws, aes(x=YEAR,y=perc_new, width=1)) + 
  geom_bar(stat="identity",col="black")+ # stat="identity" used when don't need a count for histogram
  ggtitle( "Percent of Water Systems in Violation 1994-2015")+
  labs(x="",y="% of Systems in Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30,hjust=0.5))

# Testing for Significance

plot(perc_new~YEAR,data=viol94_pws)
m1 = lm(perc_new~as.numeric(YEAR),data=viol94_pws)
summary(m1)

# Checking specific years
# View(viol94_pws)
# Look at perc_new


```


# Population served per year
```{r Pop Served over time all years and 1994-2015}
# Weighted Histogram 

library(scales)
library(ggplot2)
# for 1979-2015
qplot(YEAR, data=uniq_pws, geom="bar", weight=Pop_Violated, 
      ylab="Number of People", 
      main= "Number of People Served by Systems in Violation 1979-2015")+
      scale_y_continuous(breaks= seq(0, 15000000, by = 500000),labels=comma)+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))


# for 1994-2015
qplot(YEAR, data=uniq_pws94, geom="bar", weight=Pop_Violated, 
      ylab="Number of People", 
      main= "Number of People Served by Systems in Violation 1994-2015")+
      scale_y_continuous(breaks= seq(0, 15000000, by = 500000),labels=comma)+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))

aes(factor(Primacy.Agency), max_durY)
uniq_pws94$dummy = 1

# for 1994-2016, using ggplot
ggplot(data=uniq_pws94, aes(x=YEAR,y=..count..,weight=Pop_Violated)) + 
  geom_histogram(binwidth = 1, col = "black")+
ggtitle( "Number of People Served by Systems in Violation 1994-2015")+
  labs(x="",y="Number of People")+
  scale_y_continuous(breaks= seq(0, 15000000, by = 500000),labels=comma)+
  scale_x_continuous(breaks= seq(1994, 2016, by = 1),expand = c(0, 0))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30,hjust=0.5))


# Testing for specific years
uniq_pwsYear = uniq_pws[uniq_pws$YEAR == 2015,]
test = as.data.frame(unique(uniq_pwsYear$PWSID))
sum(uniq_pwsYear$Pop_Violated)



```


#  Percent of total US population under violation (per Total US population) 
```{r percent pop served}
pop <- read.csv("//Aa.ad.epa.gov/ord/COR/Users/M-Z/MPennino/Net MyDocuments/Projects/SDWIS/Census_USA_Annual_Population2.csv")
USpop <- pop[,1:2] # keep just US data
names(USpop) <-  c("YEAR","USpop")

#Creating dataframe for pop 2016
pop2016 <- as.data.frame(matrix(0, ncol = 2, nrow = 1))
names(pop2016)  = c("YEAR","USpop")

pop2016$YEAR = 2016
pop2016$USpop = 323127513 # Factfinder annual estimates of resident pop april 1 to july 1 2016 (obtained on 2/24/2017)

# add in 2016 pop
USpop = rbind(USpop,pop2016)


###
# Add US Pop associated with each year
uniq_pws94$USpop = USpop$USpop[match(uniq_pws94$YEAR, USpop$YEAR)] # USpop$USpop is the column I want to use to add the new column

# Create New Column with Weighted Population:Violations*Population/Total Pop
uniq_pws94$weighted.USpop <- 100*uniq_pws94$Pop_Violated/uniq_pws94$USpop

###
library(ggplot2)
qplot(YEAR, data=uniq_pws94, geom="bar", weight=100*Pop_Violated/USpop, ylab="% of Total Population", main= "Percent of US population served by systems in violation 1979-2015")+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))


```


#  Number of people in violation / total number of people served (1994-2015 only)
```{r Percent pop Served 1994-2015}
# Add total Pop Served associated with each year

uniq_pws94 <-merge(uniq_pws94,pws94,by="YEAR")

# Create New Column with Weighted Population:Violations*Population/Total Pop
uniq_pws94$weighted.pop.served <- 100*uniq_pws94$Pop_Violated/uniq_pws94$Total.Pop.Served
###
qplot(YEAR, data=uniq_pws94, geom="bar", weight=uniq_pws94$weighted.pop.served, ylab="Violations*Pop Served/Total Pop Served", main= "Percent of population served by public water in violation 1994-2015")

```



# COMBINDED PLOTS # & % - both lines
* Combinging plots for percent in violation and population served

```{r Combined Plots - Both lines}
library(scales)
library(ggplot2)
library(grid)
library(gtable)

library(dplyr)

Pop_Violated <- uniq_pws94 %>% group_by(YEAR) %>% summarize(Pop_Violated = sum(Pop_Violated), Perc_USPop = sum(weighted.USpop))


# Using Barplot to produce secondary y axis
# par(mar..) sets the bottom, left, top and right margins respectively of the plot region in number of lines of text. 
# cex.names= changes size of x axis labelels
# cex.axis=1 changes size of y axis numbers of left
# cex.lab=2 changes size of y axis label on left
# cex=1 changes the size of the secondary y axis label (on right)

#:::::::::::::::::::::::::::::::::::::::::::::::::::::

# Number of Systems in Violation and Population Served over time        
X = seq(1994, 2016, 1)
Y = seq(0, 2000000, 500000)
labs <- paste(names(table(X)))
par(mar=c(4.1,4.3,4.1,6.2))
plot(viol94_pws$Freq,type="o",col="black",las=2,cex.lab=1.5,xlab='',cex=1.5,
       ylab="Number of Systems in Violation",ylim=c(0,1000),xaxt='n',lwd=2)
axis(1,at=1:23,labels=X,las=3)

par(new=TRUE)
plot(Pop_Violated$Pop_Violated,type="o",pch=18,col="black",yaxt='n',xaxt='n', ann=FALSE, ylim=c(0,2500000), cex=1.5,lwd=2,lty=2) # xlim used to change location of line dots (xlim=c(0.5,22.4) this was used for 94-2015)

options("scipen"=100)
axis(side=4,las=2,Y,labels = prettyNum(Y, big.mark = ","))
mtext("Population Served", side=4, line=5,cex=1.5)

legend('topleft', c(expression(paste("# Violations, " ,R^{textstyle("2")}, "=0.05, p=0.15, y= 2.7*x+502")),expression(paste("Pop Served, ",R^{textstyle("2")}, "=-0.04, p=0.63, y= -8370*x+17511370"))),lty=c("solid","dashed"),col=c("black","black"),lwd=c(2,2),cex=0.9)    

                

#:::::::::::::::::::::::::::::::::::::::::::::::::::::

# % Systems in Violation and Population Served over time 
X = seq(1994, 2016, 1)
Y = seq(0, 2000000, 500000)
labs <- paste(names(table(X)))
par(mar=c(4.1,4.3,4.1,6.2))
plot(viol94_pws$perc_new,type="o",col="black",las=2,cex.lab=1.5,xlab='',cex=1.5,
       ylab="% of Systems in Violation",ylim=c(0,0.7),xaxt='n',lwd=2)
axis(1,at=1:23,labels=X,las=3)

par(new=TRUE)
plot(Pop_Violated$Perc_USPop,type="o",pch=18,col="black",yaxt='n',xaxt='n', ann=FALSE, ylim=c(0,0.9), cex=1.5,lwd=2,lty=2) # xlim used to change location of line dots

options("scipen"=100)
axis(4)
#axis(side=4,las=2,Y,labels = prettyNum(Y, big.mark = ","))
mtext("Percent of US Population Served", side=4, line=5,cex=1.5)

# legend('topleft', c("# Violations","% Pop Served"),lty=c("solid","dashed"),col=c("black","black"),lwd=c(2,2),cex=0.9)

legend('topleft', c(expression(paste("% Violations, " ,R^{textstyle("2")}, "=0.25, p<0.01, y= 0.0035*x+-6.7")),expression(paste("% Pop Served, ",R^{textstyle("2")}, "=-0.007, p=0.37, y= -0.005*x+11"))),lty=c("solid","dashed"),col=c("black","black"),lwd=c(2,2),cex=0.9) 


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Final FIGURE
# % Systems in Violation and Population Served over time 
X = seq(1994, 2016, 1)
Y = seq(0, 2000000, 500000)
labs <- paste(names(table(X)))
par(mar=c(4.1,4.3,4.1,6.2))
plot(viol94_pws$perc_new,type="o",col="black",las=2,cex.lab=1.5,xlab='',cex=1.5,
       ylab="% of Systems in Violation",ylim=c(0,0.6),xaxt='n',lwd=2)
axis(1,at=1:23,labels=X,las=3)

par(new=TRUE)
plot(Pop_Violated$Pop_Violated,type="o",pch=18,col="black",yaxt='n',xaxt='n', ann=FALSE, ylim=c(0,2500000), cex=1.5,lwd=2,lty=2) # xlim used to change location of line dots (xlim=c(0.5,22.4) this was used for 94-2015)

options("scipen"=100)
axis(side=4,las=2,Y,labels = prettyNum(Y, big.mark = ","))
mtext("Population Served", side=4, line=5,cex=1.5)

legend('topleft', c(expression(paste("% Violations, p=0.04, slope= 0.0033")),expression(paste("Pop Served, p=0.38, slope= -13704"))),lty=c("solid","dashed"),col=c("black","black"),lwd=c(2,2),cex=0.9)  

###################### (calculated below under "P-VALUES FOR REGRESSION")
# Number of Systems in Violation over Time (1994-2016)
# equation: y=8.7*x+307

# % of Systems in Violation over Time (1994-2016)
# equation: y=0.007*x+0.18

# Number of People Served (1998-2014)
# equation: y= -73986*x+149080710

# % of People Served (1998-2014)
# equation: y= -0.027463*x+55




```



# MAX DURATION Based on Quarters
```{r Max duration Quarters}

# Removing objects if re-running this again
rm(PWS_Dur_MaxQuar)
rm(PWS_Dur_MaxQuar2)
rm(Dur_Max_FreqQ)
rm(Dur_Max_FreqQ2)
gc()

# Quarter 1 = Jan, Feb, or Mar
# Quarter 2 = Apr, May, Jun
# Quarter 3 = Jul, Aug, Sep
# Quarter 4 = Oct, Nov, Dec

# Add quarter
SDWIS94$QUARTER = quarter(SDWIS94$DATE)
  
# Sort by date within each PWSID
SDWIS94 = SDWIS94[order(SDWIS94$PWSID,SDWIS94$DATE),]  # this sorts by group
row.names(SDWIS) <- NULL # remove row names

# Convert quarter to decimal 
for (i in 1:nrow(SDWIS94)){
if(SDWIS94$QUARTER[i]==1){
  SDWIS94$QuarDec[i] = 0
} else if(SDWIS94$QUARTER[i]==2){
  SDWIS94$QuarDec[i] = 0.25
} else if(SDWIS94$QUARTER[i]==3){
  SDWIS94$QuarDec[i] = 0.5
} else if(SDWIS94$QUARTER[i]==4){
  SDWIS94$QuarDec[i] = 0.75
}
} 

# Add year and QuarDec
SDWIS94$YearDec = 100*(SDWIS94$YEAR + SDWIS94$QuarDec)

# create function for calculating the max consecutive sequence of numbers
max_durQ = function(x) {
 max((rle(cumsum(c(25, diff(unique(x)) - 25))))$lengths) # use 25 because the sequence is separated by 25
}

# Finding the max duration for each PWSID
library(dplyr)
PWS_Dur_MaxQuar <- SDWIS94 %>% group_by(PWSID) %>% summarize(max_durQ = max_durQ(YearDec)) # finds max duration for each group

# Convert duration in quarters to duration in years
PWS_Dur_MaxQuar$max_durY = PWS_Dur_MaxQuar$max_durQ*0.25





```


# AVERAGE DURATION Based on Quarters
```{r , echo=T, eval=T}

# Removing objects if re-runing this again
rm(PWS_Dur_AvgQuar)
rm(PWS_Dur_AvgQuar2)
rm(Dur_Avg_FreqQ)
rm(Dur_Avg_FreqQ2)
gc()

# create function for calculating the average consecutive sequence of numbers
mean_durQ = function(x) {
 mean((rle(cumsum(c(25, diff(unique(x)) - 25))))$lengths) # use 25 because the sequence is separated by 25
}

# Finding the mean duration for each PWSID
library(dplyr)
PWS_Dur_AvgQuar <- SDWIS94 %>% group_by(PWSID) %>% summarize(mean_durQ = mean_durQ(YearDec)) # finds mean duration for each group


# Convert duration in quarters to duration in years
PWS_Dur_AvgQuar$mean_durY = PWS_Dur_AvgQuar$mean_durQ*0.25




```

# AVG DUR PLOTS
```{r}
###################################################################
# Frequency Distribution
###################################################################
PWS_Dur_AvgQuar <- PWS_Dur_AvgQuar[order(-PWS_Dur_AvgQuar$mean_durQ),]  # order max duration from largest to smallest
PWS_Dur_AvgQuar$seq = seq(1, nrow(PWS_Dur_AvgQuar), by=1) # add sequence of integers from 1 to nrow(PWS_Dur)
PWS_Dur_AvgQuar$rank = 100*PWS_Dur_AvgQuar$seq/nrow(PWS_Dur_AvgQuar) # convert the sequence to be only up to 100


ggplot(PWS_Dur_AvgQuar, aes(x=rank, y=mean_durY)) +
    geom_point(shape=1)+
  labs(x="% of systems with duration equal to or below",
       y="Average Years System is in NO3 Violation")+
  scale_y_continuous(breaks= seq(0, 10, by = 1))+
  scale_x_continuous(breaks= seq(0, 100, by = 10)) 


###################################################################
# % & Number of PWSs with specific duration
###################################################################

# add GW.or.SW
pws_gwsw = uniq_pws94[,c("PWSID","GW.or.SW")]

# merge 
PWS_Dur_AvgQuar2 = merge(PWS_Dur_AvgQuar,pws_gwsw,by="PWSID",all.x=T)
PWS_Dur_AvgQuar2 = unique(PWS_Dur_AvgQuar2)

# remove NAs
d = PWS_Dur_AvgQuar2; d=  d[!is.na(d$GW.or.SW), ]; PWS_Dur_AvgQuar2 = d

# Getting frequency for each max_durY category
library(dplyr)
Dur_Avg_FreqQ = PWS_Dur_AvgQuar2 %>%
  group_by(mean_durY) %>%
  summarize(Freq= n_distinct(PWSID))

# Calc percent of Systems for each duration
Dur_Avg_FreqQ$perc = 0
for (i in 1:nrow(Dur_Avg_FreqQ)) {
  Dur_Avg_FreqQ$perc[i] = 100*Dur_Avg_FreqQ$Freq[i]/sum(Dur_Avg_FreqQ$Freq)
  }


####################################################
# Plot Using specific bins
  
df1 <- transform(Dur_Avg_FreqQ,
                 group=cut(as.numeric(as.character(mean_durY)),
                           breaks=c(0,0.25,0.5,1,2,3,4,5,6,7,8,9),
                               labels=c("0.25","0.25-0.5","0.5-1","1-2","2-3",
                                        "3-4","4-5","5-6","6-7","7-8","8-9")))

res <- do.call(data.frame,aggregate(cbind(Freq,perc)~group, df1, 
       FUN=function(x) c(Sum=sum(x))))

# Percent of systems with specific average duration
ggplot(data=res, aes(x=group,y=perc)) + geom_bar(stat="identity")+ # stat="identity" used when don't need a count for histogram
  ggtitle( "Percent of Systems with Average Consecutive years in Violation")+
  labs(x="Average Years System was in Violation",y="Percent of Systems")+
  scale_y_continuous(breaks= seq(0, 100, by = 5))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=25))+
  theme(plot.title=element_text(size=30))

# Total number of systems for each duration 
ggplot(data=res, aes(x=group,y=Freq)) + geom_bar(stat="identity")+ # stat="identity" used when don't need a count for histogram
  ggtitle( "Number of Systems with Average Consecutive years in Violation")+
  labs(x="Average Years System was in Violation",y="Number of Systems")



```



# 3YR AVERAGE DURATION: 3 YEAR MOVING AVERAGE
```{r Average Duration Per 3 year Moving Average}


# assigning groups for each year

# First subsetting data
sub94 = SDWIS94[,c("PWSID","YEAR","QUARTER","QuarDec","YearDec","Population.Served.Count.Vio","EPA.Region","Primacy.Agency","PWS.Type","GW.or.SW","Owner.Type")]

# This code adds labels to the above sub94 dataset for different groups
gr <- transform(sub94,
                 group=cut(YEAR,
                           breaks=c(1993,1996,1999,2002,
                                    2005,2008,2011,2014),
                               labels=c("1994-96","1997-99","2000-02","2003-05",
                                        "2006-08","2009-11","2012-14")))
gr2 <- transform(sub94,
                 group=cut(YEAR,
                           breaks=c(1994,1997,2000,2003,
                                    2006,2009,2012,2015),
                               labels=c("1995-97","1998-00","2001-03","2004-06",
                                        "2007-09","2010-12","2013-15")))
gr3 <- transform(sub94,
                 group=cut(YEAR,
                           breaks=c(1995,1998,2001,2004,
                                    2007,2010,2013,2016),
                               labels=c("1996-98","1999-01","2002-04","2005-07",
                                        "2008-10","2011-13","2014-16")))

# Find specific Systems to check length
test = gr[gr$PWSID == "TX0230002",]
test2 = gr[gr$PWSID == "OK2007103",]


# Can't just merge by PWSID, need to merge by PWSID_YEAR 
# because a single PWSID can have multip years
gr$PWSID_YEAR = paste(gr$PWSID, gr$YEAR, sep = "_")  # concatenating strings 
gr2$PWSID_YEAR = paste(gr2$PWSID, gr2$YEAR, sep = "_")  # concatenating strings
gr3$PWSID_YEAR = paste(gr3$PWSID, gr3$YEAR, sep = "_")  # concatenating strings 
# Merging
gr$group2 = gr2$group[match(gr$PWSID_YEAR, gr2$PWSID_YEAR)] # merging the group from gr2 onto gr
gr$group3 = gr3$group[match(gr$PWSID_YEAR, gr3$PWSID_YEAR)] # merging the group from gr3 onto gr

# Make sure that within each PWSID the violations are ordered by YearDec
gr = gr[order(gr$PWSID,gr$YearDec),]  # this sorts by group
row.names(gr) <- NULL # remove row names

max_durQ = function(x) {
 max((rle(cumsum(c(25, diff(unique(x)) - 25))))$lengths) # use 25 because the sequence is separated by 25
}

# Testing
test3 = gr[gr$PWSID == "OK2007103" | gr$PWSID == "TX0230002",]
max((rle(cumsum(c(25, diff(unique(test3$YearDec)) - 25))))$lengths)
max((rle(cumsum(c(25, diff(unique(SDWIS94$YearDec)) - 25))))$lengths)


# Max Duration group1
grps1 = as.data.frame(c("1994-96","1997-99","2000-02","2003-05","2006-08","2009-11","2012-14"))
names(grps1) = "group"
grps1$max_durQ = "NA"
grps1$avg_max_durQ = "NA"

library(dplyr)
for (i in 1:nrow(grps1)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group == grps1[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_dur <- grp %>% group_by(PWSID) %>% summarize(max_durQ = max_durQ(YearDec))
  maxD =  max(gr_dur$max_durQ) # this find the max duration out of all PWSIDS
  avgmaxD =  mean(gr_dur$max_durQ) # this find the max duration out of all PWSIDS
  grps1[i,2] = maxD
  grps1[i,3] = avgmaxD
}

# Max Duration group2
grps2 = as.data.frame(c("1995-97","1998-00","2001-03","2004-06","2007-09","2010-12","2013-15"))
names(grps2) = "group"
grps2$max_durQ = "NA"
grps2$avg_max_durQ = "NA"

library(dplyr)
for (i in 1:nrow(grps2)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group2 == grps2[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_dur2 <- grp %>% group_by(PWSID) %>% summarize(max_durQ = max_durQ(YearDec))
  maxD =  max(gr_dur2$max_durQ) # this find the max duration out of all PWSIDS
  avgmaxD =  mean(gr_dur2$max_durQ) # this find the max duration out of all PWSIDS
  grps2[i,2] = maxD
  grps2[i,3] = avgmaxD
}


# Max Duration group3
grps3 = as.data.frame(c("1996-98","1999-01","2002-04","2005-07","2008-10","2011-13","2014-16"))
names(grps3) = "group"
grps3$max_durQ = "NA"
grps3$avg_max_durQ = "NA"

library(dplyr)
for (i in 1:nrow(grps3)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group3 == grps3[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_dur3 <- grp %>% group_by(PWSID) %>% summarize(max_durQ = max_durQ(YearDec))
  maxD =  max(gr_dur3$max_durQ) # this find the max duration out of all PWSIDS
  avgmaxD =  mean(gr_dur3$max_durQ) # this find the max duration out of all PWSIDS
  grps3[i,2] = maxD
  grps3[i,3] = avgmaxD
}

# # combine the different groups 
yr3_dur = rbind(grps1,grps2,grps3) 

yr3_dur$start_yr = substr(yr3_dur$group,1,4) # extract first 4 didgets of string

#Order / Arrange by start_yr
yr3_dur <- yr3_dur[order(yr3_dur$start_yr),]  # smallest to largest

# Convert quarters to years
yr3_dur$max_durQ = as.numeric(as.character(yr3_dur$max_durQ))
yr3_dur$avg_max_durQ= as.numeric(as.character(yr3_dur$avg_max_durQ))

yr3_dur$max_durY =  yr3_dur$max_durQ*0.25
yr3_dur$avgmax_durY =  yr3_dur$avg_max_durQ*0.25


# Average Max Duration 
yr3_dur$group <- factor(yr3_dur$group, levels = yr3_dur$group[order(yr3_dur$start_yr)])

ggplot(data=yr3_dur, aes(x=group,y=avgmax_durY)) + geom_bar(stat="identity")+ 
  ggtitle( "Average Max Duration for 3 year moving interval")+
  labs(x="",y="Average Max Years in Violations")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#############################################################

#############################################################
# Finding the Average duration for each Group of 3 years
library(dplyr)
# Max Duration group1
gr_Avg_dur1 <- gr %>% group_by(group) %>% summarize(mean_durQ = mean_durQ(YearDec)) 

# Max Duration group2
gr_Avg_dur2 <- gr %>% group_by(group2) %>% summarize(mean_durQ = mean_durQ(YearDec)) 
names(gr_Avg_dur2)[1] = "group"

# Max Duration group3
gr_Avg_dur3 <- gr %>% group_by(group3) %>% summarize(mean_durQ = mean_durQ(YearDec)) 
names(gr_Avg_dur3)[1] = "group"


# Mean Duration group1
grpsA1 = as.data.frame(c("1994-96","1997-99","2000-02","2003-05","2006-08","2009-11","2012-14"))
names(grpsA1) = "group"
grpsA1$mean_durQ = "NA"

library(dplyr)
for (i in 1:nrow(grpsA1)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group == grpsA1[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_durA1 <- grp %>% group_by(PWSID) %>% summarize(mean_durQ = mean_durQ(YearDec))
  avgD =  mean(gr_durA1$mean_durQ) # this find the mean duration out of all 
  grpsA1[i,2] = avgD
}

# Mean Duration group2
grpsA2 = as.data.frame(c("1995-97","1998-00","2001-03","2004-06","2007-09","2010-12","2013-15"))
names(grpsA2) = "group"
grpsA2$mean_durQ = "NA"

for (i in 1:nrow(grpsA2)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group2 == grpsA2[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_durA2 <- grp %>% group_by(PWSID) %>% summarize(mean_durQ = mean_durQ(YearDec))
  avgD =  mean(gr_durA2$mean_durQ) # this find the mean duration out of all 
  grpsA2[i,2] = avgD
}

# Mean Duration group3
grpsA3 = as.data.frame(c("1996-98","1999-01","2002-04","2005-07","2008-10","2011-13","2014-16"))
names(grpsA3) = "group"
grpsA3$mean_durQ = "NA"

for (i in 1:nrow(grpsA3)) { # need for loop cause need to it by group and pwsid
  grp = gr[gr$group3 == grpsA3[i,1],]
  grp = na.omit(grp)
  rownames(grp) <- NULL
  gr_durA3 <- grp %>% group_by(PWSID) %>% summarize(mean_durQ = mean_durQ(YearDec))
  avgD = mean(gr_durA3$mean_durQ) # this find the max duration out of all PWSIDS
  grpsA3[i,2] = avgD
}


#  combine the different groups 
yr3_Avg_dur = rbind(grpsA1,grpsA2,grpsA3) 

yr3_Avg_dur$start_yr = substr(yr3_Avg_dur$group,1,4) # extract first 4 digets of string

#Order / Arrange by start_yr
yr3_Avg_dur <- yr3_Avg_dur[order(yr3_Avg_dur$start_yr),]  # smallest to largest

# Convert quarters to years
yr3_Avg_dur$mean_durQ = as.numeric(as.character(yr3_Avg_dur$mean_durQ))
yr3_Avg_dur$mean_durY = yr3_Avg_dur$mean_durQ*0.25

# remove unnecessary rows (not removing because keeping 2014-2016)
# yr3_Avg_dur =  yr3_Avg_dur[-c(21),]

# have to specify the order before can plot
yr3_Avg_dur$group <- factor(yr3_Avg_dur$group, levels = yr3_Avg_dur$group[order(yr3_Avg_dur$start_yr)])


# Plot
ggplot(data=yr3_Avg_dur, aes(x=group,y=mean_durY)) + geom_bar(stat="identity")+ 
  #ggtitle( "Average Violation Duration for 3-year Moving Interval")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  labs(x="",y="Years in Violation (3-yr moving avg.)")+
  scale_y_continuous(expand=c(0,0),breaks= seq(0,0.65, by=0.05),
                     limits = c(0, 0.65))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=28))+
  theme(axis.text=element_text(size=20))+
  theme(plot.title=element_text(size=30))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))+ # add axis lines
  theme(axis.title.y=element_text(vjust=6))+ # moves y axis title left
theme(plot.margin=unit(c(0.5,0.2,0,1),"cm")) # change marge


```

# MAX DUR PLOTS
```{r}
###################################################################
# Frequency Distribution
###################################################################
PWS_Dur_MaxQuar <- PWS_Dur_MaxQuar[order(-PWS_Dur_MaxQuar$max_durY),]  # order max duration from largest to smallest

PWS_Dur_MaxQuar$seq = seq(1, nrow(PWS_Dur_MaxQuar), by=1) # add sequence of integers from 1 to nrow(PWS_Dur)

PWS_Dur_MaxQuar$rank = 100*PWS_Dur_MaxQuar$seq/nrow(PWS_Dur_MaxQuar) # convert the sequence to be only up to 100


ggplot(PWS_Dur_MaxQuar, aes(x=rank, y=max_durY)) +
    geom_point(shape=1)+
  labs(x="% of systems with duration equal to or below",
       y="Max Years System is in NO3 Violation")+
  scale_y_continuous(breaks= seq(0, 16, by = 1))+
  scale_x_continuous(breaks= seq(0, 100, by = 10)) 


###################################################################
# % & Number of PWSs with specific duration
###################################################################

# add GW.or.SW
pws_gwsw = uniq_pws94[,c("PWSID","GW.or.SW")]

# merge 
PWS_Dur_MaxQuar2 = merge(PWS_Dur_MaxQuar,pws_gwsw,by="PWSID",all.x=T)
PWS_Dur_MaxQuar2 = unique(PWS_Dur_MaxQuar2)

# remove NAs
d = PWS_Dur_MaxQuar2; d=  d[!is.na(d$GW.or.SW), ]; PWS_Dur_MaxQuar2 = d

# Getting frequency for each max_durY category
library(dplyr)
Dur_Max_FreqQ = PWS_Dur_MaxQuar2 %>%
  group_by(max_durY) %>%
  summarize(Freq= n_distinct(PWSID))


# using summarize to get frequency by GW and SW for each max_durY category
Dur_Max_FreqQ2 <- PWS_Dur_MaxQuar2 %>% 
  dplyr::group_by(max_durY) %>% 
  summarize(Freq = n(), 
            Groundwater = sum(GW.or.SW=="Groundwater"),
            Surfacewater = sum(GW.or.SW=="Surface water"))


# This calculates the percentage for all
Dur_Max_FreqQ$perc = 0
for (i in 1:nrow(Dur_Max_FreqQ)) {
  Dur_Max_FreqQ$perc[i] = 100*Dur_Max_FreqQ$Freq[i]/sum(Dur_Max_FreqQ$Freq)
  }

# This calculates the percentage for GW vs SW
Dur_Max_FreqQ2$perc = 0
for (i in 1:nrow(Dur_Max_FreqQ2)) {
  Dur_Max_FreqQ2$perc_gw[i] = 100*Dur_Max_FreqQ2$Groundwater[i]/sum(Dur_Max_FreqQ2$Freq)
  Dur_Max_FreqQ2$perc_sw[i] = 100*Dur_Max_FreqQ2$Surfacewater[i]/sum(Dur_Max_FreqQ2$Freq)
}

# Subset and rbind GW on top of SW table
Dur_Max_FreqQ3 = Dur_Max_FreqQ2[,c("max_durY","perc_gw","Groundwater")]
Dur_Max_FreqQ3$Source = "Groundwater"
names(Dur_Max_FreqQ3)[2] = "Percent"
names(Dur_Max_FreqQ3)[3] = "Number"

Dur_Max_FreqQ4 = Dur_Max_FreqQ2[,c("max_durY","perc_sw","Surfacewater")]
Dur_Max_FreqQ4$Source = "Surface water"
names(Dur_Max_FreqQ4)[2] = "Percent"
names(Dur_Max_FreqQ4)[3] = "Number"

Dur_Max_FreqQ4 = rbind(Dur_Max_FreqQ3,Dur_Max_FreqQ4)

# Percent of systems with specific max duration
ggplot(data=Dur_Max_FreqQ, aes(x=max_durY,y=perc)) + geom_bar(stat="identity")+ 
  #ggtitle( "Percent of Systems with Max Consecutive years in Violations")+
  labs(x="Max Consecutive Years System was in Violation",y="Percent of Systems")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  scale_y_continuous(breaks= seq(0, 80, by = 5))+
  #scale_x_continuous(breaks= seq(0, 15, by = 0.5))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=20))+
  theme(plot.title=element_text(size=30))


# Total number of systems for each max duration 
ggplot(data=Dur_Max_FreqQ, aes(x=max_durY,y=Freq)) + geom_bar(stat="identity")+ 
  ggtitle( "Number of Systems with Max Consecutive years in Violations")+
  labs(x="Max Years System was in Violation",y="Number of Systems")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 

# same figure as above but stacked with Number GW vs SW
ggplot(data = Dur_Max_FreqQ4, aes(x= max_durY, y=Number, fill=Source))+ 
    geom_bar(stat="identity")+ 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(fill = guide_legend(reverse=F))+
  ggtitle( "Number of Systems with Max Consecutive years in Violations")+
  labs(x="Max Consecutive Years System was in Violation",
       y="Number of Systems")+
      theme(axis.title=element_text(size=15))+
      theme(axis.text=element_text(size=15))+
      theme(plot.title=element_text(size=15))+
      theme(legend.text=element_text(size=15))+
      theme(legend.title=element_text(size=15))+
    #scale_x_continuous(expand = c(0, 0))+
   theme_bw() +
  theme(axis.line = element_line(colour = "black"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank())

# same figure as above but stacked with % GW vs SW

ggplot(data = Dur_Max_FreqQ4, aes(x= max_durY, y=Percent, fill=Source))+ 
    geom_bar(stat="identity")+ 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(fill = guide_legend(reverse=F))+
  ggtitle( "Percent of Systems with Max Consecutive years in Violations")+
  labs(x="Max Consecutive Years System was in Violation",
       y="Percent of Systems")+
      theme(axis.title=element_text(size=15))+
      theme(axis.text=element_text(size=15))+
      theme(plot.title=element_text(size=15))+
      theme(legend.text=element_text(size=15))+
      theme(legend.title=element_text(size=15))+
  #scale_y_continuous(expand = c(0, 0))+
  #scale_x_continuous(expand = c(0, 0))+
   theme_bw() +
  theme(axis.line = element_line(colour = "black"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    panel.background = element_blank())



```


# MAX DURATION % GW vs.SW PLOT - Broken Axis
```{r Max Dur % GW SW}

library(gridExtra)

#Black and White
#bw_pallet = c("black","grey")
bw_pallet = c("tomato2","royalblue")
# making two plots and then merging

g1 = ggplot(data = Dur_Max_FreqQ4, aes(x= max_durY, y=Percent, fill=Source))+ 
    geom_bar(stat="identity")+ 
  scale_fill_manual(values = bw_pallet)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(fill = guide_legend(reverse=F))+
  labs(x="Max Consecutive Years System was in Violation",
       y="% of Systems")+
    theme(axis.title=element_text(size=30))+
    theme(axis.text=element_text(size=25))+
    theme(plot.title=element_text(size=25))+
    theme(legend.position="none")+
    theme(panel.background = element_blank())+ # remove grey background
    theme(axis.line = element_line(colour = "black"))+ # add axis lines
    scale_y_continuous(breaks= seq(0,14, by = 2))+
  coord_cartesian(ylim=c(0, 13)) #+ # sets y axis limit without removing data
#theme(legend.title=element_blank())

g2 = ggplot(data = Dur_Max_FreqQ4, aes(x= max_durY, y=Percent, fill=Source))+ 
    geom_bar(stat="identity")+ 
  scale_fill_manual(values = bw_pallet)+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  #ggtitle( "Percent of Systems with Max Consecutive years in Violations")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  theme(axis.title=element_text(size=25))+
  theme(axis.text=element_text(size=25))+
  theme(plot.title=element_text(size=25))+
  theme(legend.text=element_text(size=25))+
  theme(axis.title.x=element_blank(),axis.text.x=element_blank(),axis.ticks.x=element_blank())+
  theme(axis.title.y=element_blank())+
  coord_cartesian(ylim=c(60, 70))+ # sets y axis limit 
  scale_y_continuous(breaks= seq(60,70, by = 5))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))+ # add axis lines
  theme(legend.position="top",legend.direction="vertical",
        legend.title=element_blank())+
  theme(plot.margin=unit(c(2,0.1,0.2,1.27),"cm"))

grid.arrange(g2,g1,nrow=2,ncol=1)


```



# MAX DURATION BOX PLOTS BY STATE (based on quarters)
```{r Max Duration by State and Region}

PWS_Dur_MaxQuar$Primacy.Agency = uniq_pws94$Primacy.Agency[match(PWS_Dur_MaxQuar$PWSID,uniq_pws94$PWSID)]  # adding on Primacy.Agency 

# Remove EPA Region 9
PWS_Dur_MaxQuar = PWS_Dur_MaxQuar[!grepl("EPA Region 9", PWS_Dur_MaxQuar$Primacy.Agency), ] 
row.names(PWS_Dur_MaxQuar) <- NULL  # remove row names

# ggplot, by state
ggplot(PWS_Dur_MaxQuar, aes(factor(Primacy.Agency), max_durY)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  #ggtitle( "Maximum Duration for each System in Violation 1994-2016")+
  #theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  labs(x="",y="Max Years of Consecutive Violations")+
  scale_y_continuous(breaks= seq(0, 15, by = 1))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
  theme(axis.title=element_text(size=20))+
  theme(plot.title=element_text(size=30))+
  theme(axis.text=element_text(size=17))

# Calculate Median max duration per state
library(dplyr)
PWS_Dur_MaxQuar_state <- PWS_Dur_MaxQuar %>% group_by(Primacy.Agency) %>%
  summarize(Median.Max.Dur = median(max_durY,na.rm=T),
            Mean.Max.Dur = sum(max_durY,na.rm=T))



```

# MAX DURATION by STATE by GW vs. SW
```{r  MAX DURATION by STATE by GW vs. SW}

# ggplot, by state - GW only
pws_gwsw = uniq_pws94[,c("PWSID","GW.or.SW")]

# merge 
PWS_Dur_MaxQuar2 = merge(PWS_Dur_MaxQuar,pws_gwsw,by="PWSID",all.x=T)
PWS_Dur_MaxQuar2= unique(PWS_Dur_MaxQuar2)
MaxQuar_gw = PWS_Dur_MaxQuar2[PWS_Dur_MaxQuar2$GW.or.SW == "Groundwater",]
MaxQuar_sw = PWS_Dur_MaxQuar2[PWS_Dur_MaxQuar2$GW.or.SW == "Surface water",]

ggplot(MaxQuar_gw, aes(factor(Primacy.Agency), max_durY)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x="",y="Max Years of Consecutive GW Violations")+
    scale_y_continuous(breaks= seq(0, 15, by = 1))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=17))

# ggplot, by state - SW only
ggplot(MaxQuar_sw, aes(factor(Primacy.Agency), max_durY)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x="",y="Max Years of Consecutive SW Violations")+
    scale_y_continuous(breaks= seq(0, 15, by = 1))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=17))

```



# AVG Duration Box Plots by State (based on quarters)
```{r Avg Duration Box Plots by state and region}
PWS_Dur_AvgQuar$EPA.Region = uniq_pws94$EPA.Region[match(PWS_Dur_AvgQuar$PWSID,uniq_pws94$PWSID)]  # adding on EPA.Region from uniq_pws to duration file

PWS_Dur_AvgQuar$Primacy.Agency = uniq_pws94$Primacy.Agency[match(PWS_Dur_AvgQuar$PWSID,uniq_pws94$PWSID)]  # adding on Primacy.Agency 

# ggplot, by state
ggplot(PWS_Dur_AvgQuar, aes(factor(Primacy.Agency), mean_durY)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x="",y="Average Years of Consecutive Violations each Quarter")+
    scale_y_continuous(breaks= seq(0, 10, by = 1))


```

# Duration Table by State (Max and Average)
```{r}
library(dplyr)

# Max Duration by state
MaxDur_State = PWS_Dur_MaxQuar %>% 
  group_by(Primacy.Agency) %>%
  summarize(Max_Duration_Year = mean(max_durY))

# Average Duration by state
AvgDur_State = PWS_Dur_AvgQuar %>% 
  group_by(Primacy.Agency) %>%
  summarize(Mean_Duration_Year = mean(mean_durY))


# Merge Tables 
Dur_Table = merge(MaxDur_State,AvgDur_State,by="Primacy.Agency")


#write.csv(Dur_Table, file = paste0(m_dir,"Projects/SDWIS/Data_ES&T/SDWIS_NO3_Violation_Duration_State_1994-2016_FINAL.csv"), row.names=F)



```



# TRUE FIRST TIME VIOLATORS
* Calculates % of systems each year that are repeat or first time violators
```{r TRUE FIRST TIME VIOLATORS}

#test = as.data.frame(table(uniq_pws94[uniq_pws94$YEAR == 1994,]$PWSID))
years79 = seq(1979, 2016)
#names = factor(years)
names79 =  sub("^", "y", years79) # adding y in front of all years to make it suitable for column heading


#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
pws_table = as.data.frame(table(unique(uniq_pws$PWSID)))
pws_table= pws_table[pws_table$Freq >0,]

for(i in names79) {
  pws_table[,i] <- NA # adds 1 column for each year in names
}

names(pws_table)[1] = "PWSID"
pws_table = pws_table[,-2] # removing second column
#pws_table2 = pws_table[,-2] # removing year 1994 (to use later)
#pws_table3 = pws_table[,-39] # removing year 1994 (to use later)


# Adds freq of violations for each PWSID by year
# uniq_pws this table has all unique systems violations since 1979 
for (i in 2:ncol(pws_table)){ 
  temp = as.data.frame(table(uniq_pws[uniq_pws$YEAR == years79[i-1],]$PWSID)) # extracts out whether a PWS has violation or not (1 or zero) for a particular year
  names(temp)[1] = 'PWSID'
  pws_table[,i] = temp$Freq[match(pws_table$PWSID, temp$PWSID)] # merging
}

# Find out if each year has a pervious year with >0 violations

#tst = as.data.frame(ifelse(pws_table[,5] > 0 & pws_table[,5]>0, 1,0))

# This puts a 1 for the year and system that had a violations that year & previous year
# for (i in 3:ncol(pws_table)) {
#   temp2 = as.data.frame(ifelse(pws_table[,i] > 0 & pws_table[,i-1]>0, 1,0))
#   pws_table2[,i-1] = temp2
# }
#$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


# Creating empty matrix for first time violators
pws_1st = as.data.frame(table(unique(uniq_pws$PWSID)))
pws_1st = pws_1st[pws_1st$Freq > 0,]

for(i in names79) {
  pws_1st[,i] <- NA # adds 1 column for each year in names
}
names(pws_1st)[1] = "PWSID"
pws_1st = pws_1st[,-2] # removing second column

##############################
# putting a 1 if have violation in current and next year

for (i in 3:ncol(pws_1st)) { # start on second year (3rd column)
  temp = as.data.frame(ifelse(pws_table[,i] > 0 & 
                                 rowSums(pws_table[2:(i-1)])==0,1,0))
  pws_1st[,2] = pws_table[,2] # since first year just keep same
  pws_1st[,i] = temp 
}

Violator_1st = as.data.frame(years79) # creating empty dataframe
names(Violator_1st)[1] ="YEAR"
Violator_1st$Freq_new = "NA" # adding a new column with NAs


# sum unique violations per year
for (i in 2:ncol(pws_1st)) {
  n = sum(pws_1st[,i])  # finding the sum for each year
  Violator_1st[i-1,2] = n  # putting the sum for each year into the new table
}

ggplot(data=Violator_1st, aes(x=YEAR,y=Freq_new)) + geom_bar(stat="identity")+ # stat="identity" used when don't need a count for histogram
  ggtitle( "Number of 1st time violators Each Year")+
  labs(x="",y="Number of Unique Systems in Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



# Combine all violations
stacked_viol = as.data.frame(table(uniq_pws$YEAR))
names(stacked_viol) = c("YEAR","Total_Violations")
stacked_viol$Violator_1st = Violator_1st$Freq_new
stacked_viol$Violator_1st = as.numeric(stacked_viol$Violator_1st)
stacked_viol$Repeat_Violators = stacked_viol$Total_Violations - stacked_viol$Violator_
stacked_viol2 = stacked_viol[,c(1,3,4)]
names(stacked_viol2)[2] = "New_Violators"


# Change order of columns
stacked_viol2 = stacked_viol2[,c('YEAR','Repeat_Violators','New_Violators')] 


# Plot stacked bar plot
# first manipulate the data to put the variables all in one column
library(reshape)
mdfr <- melt(stacked_viol2, id.vars = "YEAR")

# Now plot, using the variable named variable to determine the fill colour of each bar.
mdfr$YEAR2 = mdfr$YEAR
mdfr$YEAR = as.numeric(as.character(mdfr$YEAR))
mdfr94 = mdfr[mdfr$YEAR >= 1994 & mdfr$YEAR <= 2016,]

# Calc % in 1994 and % in 2015 or 2016 or 2014

rept = mdfr94[mdfr94$variable == "Repeat Violators",]
100*rept[rept$YEAR == 1994,]$value/sum(mdfr94[mdfr94$YEAR == 1994,]$value)
#51% repeat violators in 1994

100*rept[rept$YEAR == 2014,]$value/sum(mdfr94[mdfr94$YEAR == 2014,]$value)
#80% repeat violators in 2014

100*rept[rept$YEAR == 2015,]$value/sum(mdfr94[mdfr94$YEAR == 2015,]$value)
#77% repeat violators in 2015

100*rept[rept$YEAR == 2016,]$value/sum(mdfr94[mdfr94$YEAR == 2016,]$value)
#74% repeat violators in 2016


# reverse order of mdfr94$variable
mdfr94$variable <- factor(mdfr94$variable, levels = c("New_Violators", "Repeat_Violators"))

# Change names
library(plyr)
mdfr94$variable = revalue(mdfr94$variable,c("New_Violators"="New Violators","Repeat_Violators"="Repeat Violators"))
detach(package:plyr) 

#*************************************************************
# Changing Color
library(RColorBrewer)
library(viridis)
colourCount = length(unique(mdfr94$variable)) # number of colors I need
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 9 is number of original colors

#Black and White
bw_pallet = c("grey","black")

# making two plots and then merging
library(scales)
ggplot(mdfr94, aes(YEAR, value, fill = variable)) +
    geom_bar(position = "fill", stat = "identity") +
    scale_fill_manual(values = bw_pallet,
                      labels=c("New Violators   ","Repeat Violators"))+  # Color Black & Grey
  scale_y_continuous(labels = percent, expand = c(0, 0))+
    #ggtitle( "Percent of 1st time violators each year")+
  labs(x="",y="% Repeat Violators")+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    scale_x_continuous(breaks=seq(1994, 2016, 1),expand = c(0, 0))+
      theme(legend.title=element_blank())+    
    theme(axis.title=element_text(size=30))+    
    theme(axis.text=element_text(size=20))+
      theme(plot.title=element_text(size=30))+
      theme(legend.text=element_text(size=20))+
    theme(legend.position="top")+
    guides(fill = guide_legend(reverse=F))

 


```



# State Inventory
```{r Inventory of Systems per State}
# Extracting just State data
# remove rows with the string "Total""
state_inventory = inventoryPWS[!grepl("Total", inventoryPWS$State), ] # extracts rows without specific string


# Remove rows based on multiple strings, remove region numbers (except region 9):
state_inventory <- subset(state_inventory, 
                      !State%in%c("01","02","03","04","05","06","07","08","10",
                                  "1","2","3","4","5","6","7","8"))
library(plyr)
state_inventory$State = revalue(state_inventory$State, c("9"="09"))
detach(package:plyr) 

levels(factor(state_inventory$State)) # checks factors 

# remove non-conterminous states:Alaska (AK), American Samoa (AS), Guam (GU), Hawaii (HI),Northern Mariana Islands (MP), Puerto Rico (PR),US Virgin Islands (VI), Palau(PW)
# not removing Navajo Nation (NN)
state_inventory <- subset(state_inventory, 
                      !State%in%c("AK","AS","GU","HI","MP","PR","VI","PW"))

levels(factor(state_inventory$State)) # checks factors 


state_inventory$TotSys.unknown = as.numeric(as.character(state_inventory$TotSys.unknown)) # first need to convert factor to numeric
state_inventory$TotPop.unknown = as.numeric(as.character(state_inventory$TotPop.unknown)) # first need to convert factor to numeric


# Rename the States
# rename the units 
library(plyr)
state_inventory$STATE = revalue(state_inventory$State, 
                  c("AL"="Alabama","AR"="Arkansas",
                    "AZ"="Arizona","CA"="California","CO"="Colorado",
                    "CT"="Connecticut","DC"="District of Columbia","DE"="Delaware",
                    "FL"="Florida","GA"="Georgia",
                    "IA"="Iowa","ID"="Idaho","IL"="Illinois","IN"="Indiana",
                    "KS"="Kansas","KY"="Kentucky","LA"="Louisiana",
                    "MA"="Massachusetts","MD"="Maryland","ME"="Maine",
                    "MI"="Michigan","MN"="Minnesota","MO"="Missouri",
                    "MS"="Mississippi",
                    "MT"="Montana","NC"="North Carolina","ND"="North Dakota",
                    "NE"="Nebraska","NH"="New Hampshire","NJ"="New Jersey",
                    "NM"="New Mexico","NN"="Navajo Nation","NV"="Nevada",
                    "NY"="New York","OH"="Ohio","OK"="Oklahoma","OR"="Oregon",
                    "PA"="Pennsylvania",
                    "RI"="Rhode Island","SC"="South Carolina",
                    "SD"="South Dakota","TN"="Tennessee","TX"="Texas","UT"="Utah",
                    "VA"="Virginia","VT"="Vermont",
                    "WA"="Washington","WI"="Wisconsin",
                    "WV"="West Virginia","WY"="Wyoming"))
detach(package:plyr) 

# sum all PWS types together to get Tot_Systems
for (i in 1:nrow(state_inventory)) {
state_inventory$Tot_Systems[i] = sum(state_inventory$TotSys.CWS[i],
                                   state_inventory$TotSys.NTNCWS[i],
                                state_inventory$TotSys.TNCW[i],
                                state_inventory$TotSys.unknown[i], NA, na.rm = TRUE)}

# Sum Pop served for each PWS type together to get Tot_Sys_Pop
for (i in 1:nrow(state_inventory)) {
state_inventory$Tot_Sys_Pop[i] = sum(state_inventory$TotPop.CWS[i],
                                   state_inventory$TotPop.NTNCWS[i],
                                state_inventory$TotPop.TNCW[i],
                                state_inventory$TotPop.unknown[i], NA, na.rm = TRUE)}

# Total number of systems for all years combined
state_invent94 <- aggregate(cbind(Tot_Systems,Tot_Sys_Pop) ~ STATE, 
                          data = state_inventory, sum)


```



# STATE VIOLATIONS
```{r Violations per state}


############################################################
levels(factor(uniq_pws94$Primacy.Agency)) # checks factors 

# Remove region 9 
uniq_pws94_Nr9 = uniq_pws94[!grepl("EPA Region 9", uniq_pws94$Primacy.Agency), ]

ggplot(uniq_pws94_Nr9, aes(x = factor(Primacy.Agency))) + 
  geom_bar(aes(uniq_pws94_Nr9$Primacy.Agency))+
  ggtitle("NO3 Violations per State 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x="",y="Number of Systems in Violation")

# Violations per state table
summary(uniq_pws94$YEAR)
viol_state = as.data.frame(table(uniq_pws94$Primacy.Agency))
names(viol_state) = c("State","Violations")

# Remove EPA regions & non conterminous states

viol_state2 <- subset(viol_state, !State%in%c("EPA Region 4","EPA Region 5","EPA Region 6","EPA Region 7","EPA Region 8","EPA Region 9","EPA Region 10","Alaska","American Samoa","Guam","Hawaii","Navajo Nation","Northern Mariana Islands","Puerto Rico","US Virgin Islands")) 


#write.csv(viol_state2, file = paste0(m_dir,"Projects/SDWIS/NO3_Violations_per_State1994-2016_updated.csv"), row.names=F)



```

# STATE % VIOLATIONS Mean Annual Violations per state 1994-2016 (% of means)
```{r Percent Mean Annual Violations per state 1994-2016}
# Mean (+/- SE) Inventory of Active Systems Per State (averaging over total per year)
library(dplyr)
state_inventory_avg <-
  state_inventory %>% dplyr::group_by(STATE) %>%
  summarize(mean_viol_inventory = mean(Tot_Systems),
            sd_viol_inventory = sd(Tot_Systems),
            mean_pop_inventory = mean(Tot_Sys_Pop),
            sd_pop_inventory = sd(Tot_Sys_Pop))
#
#
state_inventory_avg$se_viol_inventory =
  state_inventory_avg$sd_viol_inventory/sqrt(max(state_inventory$YEAR)
                                        -max(state_inventory$YEAR)+1)

state_inventory_avg$se_pop_inventory =
  state_inventory_avg$sd_pop_inventory/sqrt(max(state_inventory$YEAR)
                                        -max(state_inventory$YEAR)+1)
#
# Mean (+/- SE) systems in violation per state (averaging over total per year)

# First create table with number of violations per state per year
library(dplyr)
state_viol_year = uniq_pws94 %>% group_by(Primacy.Agency, YEAR) %>% summarize(Violations = n_distinct(PWSID))
#test = uniq_pws94[uniq_pws94$Primacy.Agency == "Arizona",]
test = uniq_pws94[uniq_pws94$Primacy.Agency == "Arkansas",]
#
#
# now get mean & SD for number of systems in violation per state 1994-2015
state_viol_avg <-
  state_viol_year %>%
  group_by(Primacy.Agency) %>%
  summarize(mean_violations = mean(Violations),
            sd_violations = sd(Violations))
#
# add SE
state_viol_avg$se_violations = state_viol_avg$sd_violations/sqrt(max(state_viol_year$YEAR)-min(state_viol_year$YEAR)+1)

# Remove EPA Region 9
state_viol_avg = state_viol_avg[!grepl("EPA Region 9",
                                       state_viol_avg$Primacy.Agency), ]
row.names(state_viol_avg) <- NULL  # remove row names

state_inventory_avg = state_inventory_avg[!grepl("09",
                                       state_inventory_avg$STATE), ]
row.names(state_inventory_avg) <- NULL  # remove row names
#
nrow(state_viol_avg)  #43
nrow(state_inventory_avg) # 50


# Merge the inventory of # systems per state with Violation Freq per state
state_viol_avg2 = merge(state_viol_avg,state_inventory_avg,by.x="Primacy.Agency",by.y="STATE",all.y=T)


state_viol_avg$mean_viol_inventory =
  state_inventory_avg$mean_viol_inventory[match(state_viol_avg$Primacy.Agency,
                                        state_inventory_avg$STATE)]

state_viol_avg$se_viol_inventory =
  state_inventory_avg$se_viol_inventory[match(state_viol_avg$Primacy.Agency,
                                        state_inventory_avg$STATE)]
#
# Calculating mean percent of PWS in violation
state_viol_avg2$perc_viol = 100*state_viol_avg2$mean_violations /
  state_viol_avg2$mean_viol_inventory

# Propagate Standard Error
state_viol_avg2$perc_viol_se = sqrt(
  (state_viol_avg2$se_violations / state_viol_avg2$mean_violations )^2 +
    ( state_viol_avg2$se_viol_inventory/ state_viol_avg2$mean_viol_inventory)^2 )
#
# Remove Navajo Nation and DC
state_viol_avg2 <- subset(state_viol_avg2,
                      !Primacy.Agency%in%c("Navajo Nation","District of Columbia"))


# Plotting the frequencies
# defining the top and bottom of the error bars

limits <- aes(ymax = state_viol_avg2$perc_viol +
                state_viol_avg2$perc_viol_se,
                ymin=state_viol_avg2$perc_viol)
#
ggplot(data=state_viol_avg2, aes(x = factor(Primacy.Agency),y=perc_viol))+ geom_bar(stat="identity")+
  ggtitle( "Mean Annual Percent of Systems in Violation 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  labs(x="",y="Percent of Systems in Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      theme(plot.title=element_text(size=20))+
      theme(axis.title=element_text(size=20))+
      theme(axis.text=element_text(size=15))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
      geom_errorbar(limits, width=0.2)

#write.csv(state_viol_avg2, file = paste0(m_dir,"Projects/SDWIS/NO3_Mean_Annual_Violations_per_State_1994-2016_updated.csv"), row.names=F)





```



# % STATE Mean Annual Violation (mean of %)
```{r}

# Add Zero Violations for the years that a state has no violation
temp = state_viol_year
vals <- expand.grid(Primacy.Agency = unique(temp$Primacy.Agency),
                    YEAR = unique(temp$YEAR))
state_viol_year = merge(vals,temp,all = TRUE)

# use this to check that each state has same number of years
library(dplyr)
test = state_viol_year %>%   
  group_by(Primacy.Agency) %>%
  summarize(num_years= n_distinct(YEAR))

# convert NA's to zero
state_viol_year[is.na(state_viol_year)] <- 0

# Merge by State and Year
state_viol_inv = merge(state_viol_year, 
          state_inventory[,c('STATE','YEAR','Tot_Systems')], 
          by.x=c("Primacy.Agency","YEAR"),by.y=c("STATE","YEAR"))


# Calculate the % in violation per state and year
state_viol_inv$perc_viol = 100*state_viol_inv$Violations / 
  state_viol_inv$Tot_Systems

# Calcualte Mean Annual Percent in Violation 
library(dplyr)
state_viol_mean <- 
  state_viol_inv %>% 
  dplyr::group_by(Primacy.Agency) %>% 
  summarize(perc_viol_mean = mean(perc_viol), 
            perc_viol_sd = sd(perc_viol),
            perc_viol_se = perc_viol_sd/sqrt(n()))


# Plotting the frequencies
# defining the top and bottom of the error bars

limits <- aes(ymax = state_viol_mean$perc_viol_mean +
                state_viol_mean$perc_viol_se, 
                ymin=state_viol_mean$perc_viol_mean)

ggplot(data=state_viol_mean, aes(x = factor(Primacy.Agency),y=perc_viol_mean))+ geom_bar(stat="identity")+ 
  ggtitle( "Mean Annual Percent of Systems in Violation 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  labs(x="",y="Percent of Systems in Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      theme(plot.title=element_text(size=20))+
      theme(axis.title=element_text(size=20))+
      theme(axis.text=element_text(size=15))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
      geom_errorbar(limits, width=0.2)

#write.csv(state_viol_mean, file = paste0(m_dir,"Projects/SDWIS/Mean_of_Perc_Violations_per_State_1994-2016_updated2.csv"), row.names=F)



```


# STATE POP SERVED 
```{r Pop Served per state}
library(scales)



# People in Violations per state table
library("questionr")
state_pop_violations = as.data.frame(wtd.table(x = uniq_pws94$Primacy.Agency, weights = uniq_pws94$Pop_Violated))

names(state_pop_violations) = c("State","People_Served")

#write.csv(state_pop_violations, file = paste0(m_dir,"Projects/SDWIS/NO3_Pop_Violations_per_State_1994-2016_updated.csv"), row.names=F)

###########################################################
# Second method of calculation
# Find Average Pop per System
# Avg_Pop <- aggregate(Pop_Violated ~ Primacy.Agency, data = uniq_pws94, mean)
# 
# # Merge avg Pop onto freq table 
# viol_state$Avg_Pop_Violated = Avg_Pop$Pop_Violated[match(viol_state$State, Avg_Pop$Primacy.Agency)] 
# 
# # multiply average pop per system by Freq table
# viol_state$Tot_Pop_Violated = viol_state$Violations*viol_state$Avg_Pop_Violated
# 
# library(stringr)
# zip_violations$Zip_Code = str_sub(zip_violations$zipID,start=-5) # extract last 5 digets of string

# Check if  state_pop_violations$Freq = viol_state$Tot_Pop_Violated
# they do 

```


# STATE % Pop Served (Averge Annual, % of means)
```{r}

state_pop_avg = state_viol_avg2
library(dplyr)
# First create table with Pop served per state per year
state_pop_year = uniq_pws94 %>% dplyr::group_by(Primacy.Agency, YEAR) %>% summarize(Pop_served = sum(Pop_Violated))
# test = uniq_pws94[uniq_pws94$Primacy.Agency == "Arizona",]
# sum(test[test$YEAR == 2000,"Pop_Violated"])


# now get mean & SD for number of systems in violation per state 1994-2015
state_pop_avg <-
  state_pop_year %>%
  dplyr::group_by(Primacy.Agency) %>%
  summarize(mean_pop_served = mean(Pop_served),
            sd_pop_served = sd(Pop_served))

# add SE
state_pop_avg$se_pop_served=
  state_pop_avg$sd_pop_served/sqrt(max(state_viol_year$YEAR) -min(state_viol_year$YEAR)+1)

# Merge the inventory of # systems per state with Violation Freq per state
state_pop_avg2 = merge(state_pop_avg,
             state_inventory_avg[,c("STATE","mean_pop_inventory","se_pop_inventory")],
                       by.x="Primacy.Agency",by.y="STATE",all.y=T)


# Calculating mean percent of pop served by violators
state_pop_avg2$perc_pop_served = 100*state_pop_avg2$mean_pop_served /
  state_pop_avg2$mean_pop_inventory

# Propagate Standard Error
state_pop_avg2$perc_pop_served_se = sqrt(
  (state_pop_avg2$se_pop_served / state_pop_avg2$mean_pop_served)^2 +
    (state_pop_avg2$se_pop_inventory/ state_pop_avg2$mean_pop_inventory)^2 )

# Remove Navajo Nation and DC
state_pop_avg2 <- subset(state_pop_avg2,
                      !Primacy.Agency%in%c("Navajo Nation","District of Columbia"))


# Plotting the frequencies
# defining the top and bottom of the error bars

# limits <- aes(ymax = state_pop_avg2$perc_pop_served +
#                 state_pop_avg2$perc_pop_served_se,
#                 ymin=state_pop_avg2$perc_pop_served)
# 
# ggplot(data=state_pop_avg2, aes(x = factor(Primacy.Agency),y=perc_pop_served))+ geom_bar(stat="identity")+
#   ggtitle( "Mean Annual Percent of Population Served by Systems in Violation 1994-2016")+
#   theme(plot.title = element_text(hjust = 0.5))+#puts title in center
#   labs(x="",y="% Population Served by Systems in Violation")+
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))+
#       theme(plot.title=element_text(size=20))+
#       theme(axis.title=element_text(size=20))+
#       theme(axis.text=element_text(size=15))+
#   theme(panel.background = element_blank())+ # remove grey background
#   theme(axis.line=element_line())+ # adds axis lines
#       geom_errorbar(limits, width=0.2)


# write.csv(state_pop_avg2, file = paste0(m_dir,"Projects/SDWIS/NO3_Mean_Pop_Violations_per_State_1994-2016_updated.csv"), row.names=F)


```

# STATE % Pop Served (Averge Annual, mean of %)
```{r}


# Add Zero Violations for the years that a state has no violation
temp = state_pop_year
vals <- expand.grid(Primacy.Agency = unique(temp$Primacy.Agency),
                    YEAR = unique(temp$YEAR))
state_pop_year = merge(vals,temp,all = TRUE)

# use this to check that each state has same number of years
library(dplyr)
test = state_pop_year %>%   
  group_by(Primacy.Agency) %>%
  summarize(num_years= n_distinct(YEAR))

# convert NA's to zero
state_pop_year[is.na(state_pop_year)] <- 0


# Merge by State and Year
state_pop_inv = merge(state_pop_year, 
          state_inventory[,c('STATE','YEAR','Tot_Sys_Pop')], 
          by.x=c("Primacy.Agency","YEAR"),by.y=c("STATE","YEAR"))


# Calculate the % in violation per state and year
state_pop_inv$perc_pop = 100*state_pop_inv$Pop_served / 
  state_pop_inv$Tot_Sys_Pop

# Calcualte Mean Annual Percent in Violation 
library(dplyr)
state_pop_mean <- 
  state_pop_inv %>% 
  dplyr::group_by(Primacy.Agency) %>% 
  summarize(perc_pop_mean = mean(perc_pop), 
            perc_pop_sd = sd(perc_pop),
            perc_pop_se = perc_pop_sd/sqrt(n()))

# Plotting the frequencies
# defining the top and bottom of the error bars

limits <- aes(ymax = state_pop_mean$perc_pop_mean +
                state_pop_mean$perc_pop_se, 
                ymin=state_pop_mean$perc_pop_mean)

ggplot(data=state_pop_mean, aes(x = factor(Primacy.Agency),y=perc_pop_mean))+ geom_bar(stat="identity")+ 
  ggtitle( "Mean Annual Percent of Population Served by Systems in Violation 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  labs(x="",y="% Population Served by Systems in Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
      theme(plot.title=element_text(size=20))+
      theme(axis.title=element_text(size=20))+
      theme(axis.text=element_text(size=15))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
      geom_errorbar(limits, width=0.2)


#write.csv(state_pop_mean, file = paste0(m_dir,"Projects/SDWIS/Mean_of_Perc_Pop_Served_per_State_1994-2016_updated2.csv"), row.names=F)


```


# Population Groupings
```{r}

uniq_pws94$System_size <- NA
uniq_pws94$System_size[uniq_pws94$Pop_Violated < 500] <- "Very small (<500 people served)" 
uniq_pws94$System_size[(uniq_pws94$Pop_Violated >= 500) & (uniq_pws94$Pop_Violated < 3300)] <- "Small (between 500 and 3,299 people served)" 
uniq_pws94$System_size[(uniq_pws94$Pop_Violated >= 3300) & (uniq_pws94$Pop_Violated < 10000)] <- "Medium (between 3,300 and 9,999 people served)"
uniq_pws94$System_size[(uniq_pws94$Pop_Violated >= 10000)&(uniq_pws94$Pop_Violated < 100000)] <- "Large (between 10,000 and 99,999 people served)" 
uniq_pws94$System_size[uniq_pws94$Pop_Violated >= 100000] <- "Very large (100,000+ people served)" 


levels(factor(uniq_pws94$System_size))
summary(uniq_pws94$System_size)
summary(uniq_pws94$Pop_Violated)
class(uniq_pws94$Pop_Violated)

lgend = c("Very small (<500 people served)","Small (between 500 and 3,299 people served)","Medium (between 3,300 and 9,999 people served)","Large (between 10,000 and 99,999 people served)", "Very large (100,000+ people served)")

#Violations by System Size...still need to adjust for order of categories.
p<-ggplot(subset(uniq_pws94))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=factor(System_size,levels=lgend)))+
  #scale_fill_manual(values = mypal(colourCount))+
  #ggtitle( "Nitrate Violations by Public Water System Size")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  labs(x="",y="Number of Systems in Violation")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=20))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines
  

```



# GW vs. SW OVER TIME NUMBER
```{r GW vs. SW OVER TIME NUMBER}

library(RColorBrewer)
colourCount = length(unique(uniq_pws94$GW.or.SW)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 

# Ground Water and Surface Water Plotted Together
p<-ggplot(subset(uniq_pws94,GW.or.SW="Surface Water"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=GW.or.SW))+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle( "Drinking Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  labs(x="",y="Number of Violations")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines
  #+scale_fill_grey()



# Just Surface Water
p<-ggplot(subset(uniq_pws94,GW.or.SW !="Groundwater"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=GW.or.SW),fill="cyan4")+
    ggtitle( "Surface Water Violations")+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  labs(x="",y="Number of Violations")+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=25))+
      theme(plot.title=element_text(size=30))


# Counting the number of SW and GW violations
nrow(subset(uniq_pws94, uniq_pws94$GW.or.SW =="SW"))
nrow(subset(uniq_pws94, uniq_pws94$GW.or.SW =="GW"))

# Counting the number of SW and GW violations for specific year
gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",] # subsetting
nrow(subset(gw,gw$YEAR == 1994))

sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",] # subsetting
nrow(subset(sw,sw$YEAR == 2015))

# The values correspond with the SW plot


```



# GW vs SW POP OVER TIME
```{r People Over Time GW vs SW}

# People Served by Ground Water and Surface Water Plotted Together
library(scales)
library(ggplot2)


colourCount = length(unique(uniq_pws94$GW.or.SW)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 


# Reverse the order of GW and SW
uniq_pws94$GW.or.SW <- factor(uniq_pws94$GW.or.SW, levels = c("Surface water", "Groundwater"))
# or
#uniq_pws94$GW.or.SW <- factor(uniq_pws94$GW.or.SW, levels = c("Groundwater","Surface water"))

nrow(uniq_pws94)#12299
test = as.data.frame(na.omit(uniq_pws94$GW.or.SW))
nrow(test)#12297
uniq_pws94 = na.omit(uniq_pws94)
nrow(uniq_pws94)#12297

mypal2 = c("royalblue","tomato2")

p<-ggplot(subset(uniq_pws94,GW.or.SW="Surface Water"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=GW.or.SW, 
               weight = uniq_pws94$Pop_Violated))+
  ggtitle("Drinking Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  scale_fill_manual(values = mypal2)+
  # scale_fill_manual(values = mypal(colourCount))+
  labs(x="",y="Number of People Served")+
  scale_y_continuous(breaks= seq(0,2000000, by=200000),
                     labels=comma,expand=c(0,0))+ 
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) #+# add axis lines
  #scale_fill_grey()


```

#**
# GW vs SW Spikes Specific years
```{r Spikes in SW or GW violation}

# Testing for specific years
# test1 = uniq_pws94[uniq_pws94$YEAR == 2016,]
# test2 = test1[test1$GW.or.SW == "Groundwater",]
# sum(test2$Pop_Violated)
# Surface water
# Groundwater

year = 2016
# Find which states are culprites for specific years
test1 = uniq_pws94[uniq_pws94$YEAR == year,]
#test1[which.max( test1$Pop_Violated),]
test2 = test1[order(test1$Pop_Violated, decreasing = T),]  # this sorts by group
#test2b = test1[order(test1$Pop_Violated, decreasing = T),]  # this sorts by group
#sum(test1[test1$GW.or.SW == "Surface water",]$Pop_Violated)

# see if the state is > 50% of surface water
sw = test2[test2$GW.or.SW == "Surface water",]
gw = test2[test2$GW.or.SW == "Groundwater",]

100*max(sw$Pop_Violated)/sum(sw$Pop_Violated)
100*max(gw$Pop_Violated)/sum(gw$Pop_Violated)
#View(test2)

# Find out details about the system in violation
#test3 = SDWIS[SDWIS$PWSID == "CA5010010",]
# View(test3)

#1997 SW, CA1010007, CITY OF FRESNO, CA
#1998 SW, OH2504412, Columbus, OH
#2000 SW, OH2504412, Columbus, OH
#2002 GW, NY5110526, Long island, NY
#2003 SW, AZ0407095, CITY OF MESA, AZ
#2006 SW, OH2504412, Columbus, OH
#2007 SW, CA5010010, CITY OF MODESTO, CA
#2008 SW, PA7670073, 
#2009 SW, CA1910001, CITY OF ALHAMBRA, CA
#2010 SW, OH7200311, FREMONT CITY, OH
#2011 SW, CA3310025, NORCO, CA
#2013 SW, CA5010010, MODESTO, CA
#2015 SW, OH2504412, Columbus, OH
#2016 SW, OH2504412, Columbus, OH

# Find max CA people served 
ca = uniq_pws94[uniq_pws94$Primacy.Agency == "California",]
test2 = ca[order(ca$Pop_Violated, decreasing = T),]  # this sorts by group
#View(test2)

# Find zip code for the PWSID with highest Pop_Impacted
#zip_match2[zip_match2$PWSID == "CA5010010",]
#zip93703, or zip95354

# Plot without Columbus & Long Island

no_columbus<-uniq_pws94[!(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==1998),]
no_columbus<-no_columbus[!(no_columbus$PWSID=="OH2504412" & no_columbus$YEAR==2000),]
no_columbus<-no_columbus[!(no_columbus$PWSID=="OH2504412" & no_columbus$YEAR==2006),]
no_columbus<-no_columbus[!(no_columbus$PWSID=="OH2504412" & no_columbus$YEAR==2015),]
no_columbus<-no_columbus[!(no_columbus$PWSID=="OH2504412" & no_columbus$YEAR==2016),]
no_columbus<-no_columbus[!(no_columbus$PWSID=="NY5110526" & no_columbus$YEAR==2002),]

mypal2 = c("royalblue","tomato2")

p<-ggplot(subset(no_columbus,GW.or.SW="Surface Water"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=GW.or.SW, 
               weight = no_columbus$Pop_Violated))+
  ggtitle("Drinking Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  scale_fill_manual(values = mypal2)+
  #scale_fill_manual(values = mypal(colourCount))+
  labs(x="",y="Number of People Served")+
  scale_y_continuous(breaks= seq(0,2000000, by=200000),
                     labels=comma,expand=c(0,0))+ 
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) #+# add axis lines
  #scale_fill_grey()

# Plot with Just Sites with > 50% contribution to spike
no_spikes<-uniq_pws94[!(uniq_pws94$PWSID=="CA1010007" & uniq_pws94$YEAR==1997),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH2504412" & no_spikes$YEAR==1998),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH2504412" & no_spikes$YEAR==2000),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="NY5110526" & no_spikes$YEAR==2002),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="AZ0407095" & no_spikes$YEAR==2003),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH2504412" & no_spikes$YEAR==2006),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="CA5010010" & no_spikes$YEAR==2007),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="PA7670073" & no_spikes$YEAR==2008),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="CA1910001" & no_spikes$YEAR==2009),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH7200311" & no_spikes$YEAR==2010),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="CA3310025" & no_spikes$YEAR==2011),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="CA5010010" & no_spikes$YEAR==2013),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH2504412" & no_spikes$YEAR==2015),]
no_spikes<-no_spikes[!(no_spikes$PWSID=="OH2504412" & no_spikes$YEAR==2016),]


p<-ggplot(subset(no_spikes,GW.or.SW="Surface Water"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=GW.or.SW, 
               weight = no_spikes$Pop_Violated))+
  ggtitle("Drinking Water Source, no Spikes")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
  scale_fill_manual(values = mypal2)+
  #scale_fill_manual(values = mypal(colourCount))+
  labs(x="",y="Number of People Served")+
  scale_y_continuous(breaks= seq(0,2000000, by=200000),
                     labels=comma,expand=c(0,0))+ 
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) #+# add axis lines
  #scale_fill_grey()


# Specific Year Checks
sum(no_spikes[no_spikes$YEAR == 1999,]$Pop_Violated) # 697467 people
sum(no_spikes[no_spikes$YEAR == 2014,]$Pop_Violated) # 175485 people
sum(no_spikes[no_spikes$YEAR == 2015,]$Pop_Violated) # 236105 people
sum(no_spikes[no_spikes$YEAR == 2016,]$Pop_Violated) # 359409 people


# Calc Number of People Served Each year with No Spikes
library(dplyr)
no_spikes_table = as.data.frame(table(no_spikes$YEAR))
no_spikes_table = no_spikes %>% 
  group_by(YEAR) %>% 
  summarize(Pop_Served = sum(Pop_Violated))

# Plot with Just Sites with > 50% contribution to spike

spikes<-uniq_pws94[(uniq_pws94$PWSID=="CA1010007" & uniq_pws94$YEAR==1997),]
spikes[2,]<-uniq_pws94[(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==1998),]
spikes[3,]<-uniq_pws94[(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==2000),]
spikes[4,]<-uniq_pws94[(uniq_pws94$PWSID=="NY5110526" & uniq_pws94$YEAR==2002),]
spikes[5,]<-uniq_pws94[(uniq_pws94$PWSID=="AZ0407095" & uniq_pws94$YEAR==2003),]
spikes[6,]<-uniq_pws94[(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==2006),]
spikes[7,]<-uniq_pws94[(uniq_pws94$PWSID=="CA5010010" & uniq_pws94$YEAR==2007),]
spikes[8,]<-uniq_pws94[(uniq_pws94$PWSID=="PA7670073" & uniq_pws94$YEAR==2008),]
spikes[9,]<-uniq_pws94[(uniq_pws94$PWSID=="CA1910001" & uniq_pws94$YEAR==2009),]
spikes[10,]<-uniq_pws94[(uniq_pws94$PWSID=="OH7200311" & uniq_pws94$YEAR==2010),]
spikes[11,]<-uniq_pws94[(uniq_pws94$PWSID=="CA3310025" & uniq_pws94$YEAR==2011),]
spikes[12,]<-uniq_pws94[(uniq_pws94$PWSID=="CA5010010" & uniq_pws94$YEAR==2013),]
spikes[13,]<-uniq_pws94[(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==2015),]
spikes[14,]<-uniq_pws94[(uniq_pws94$PWSID=="OH2504412" & uniq_pws94$YEAR==2016),]


library(RColorBrewer)
colourCount = length(unique(spikes$GW.or.SW)) # number of colors I need

ggplot() + 
  geom_bar(aes(y = Pop_Violated, x = YEAR, fill = GW.or.SW), 
                    data = spikes, stat="identity")+
  ggtitle( "Drinking Water Source, Spikes Only")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(x="",y="Number of People Served")+
  scale_fill_manual(values = mypal(colourCount))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(breaks= seq(0,2000000, by=200000),
                     labels=comma,expand=c(0,0),limits=c(0,1200000))+
  scale_x_continuous(breaks=seq(1994, 2016, 1),expand = c(0, 0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) #+# add axis lines
#scale_fill_grey()



##

```

#**

# GW vs SW % OVER TIME
```{r GW vs SW % OVER TIME}

###^^^^###^^^^###^^^^###^^^^###^^^^###^^^^###^^^^###^^^^###^^^^###^^^^
# Percent in violations (stacked with GW vs. SW)
#Calc Freq per year for GW or SW violations separately 

GW = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
gw_yr = as.data.frame(table(GW$YEAR)) # frequency table of GW violations per year

SW = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]
sw_yr = as.data.frame(table(SW$YEAR)) # frequency table of SW violations per year

names(gw_yr) <-  c("YEAR","Freq_gw")
names(sw_yr) <-  c("YEAR","Freq_sw")

# Merge 
gwsw = merge(gw_yr,sw_yr,by="YEAR")

# Merge
gwsw = merge(gwsw,invent_gwsw,by="YEAR")

# Calc percent GW and SF
gwsw$gw_perc = 100*gwsw$Freq_gw / gwsw$GW
gwsw$sw_perc = 100*gwsw$Freq_sw / gwsw$SW



# Rearrange df to it is in long form, not wide form
library(reshape)
gwsw.m <- melt(gwsw, id.vars = "YEAR")

# subset out just percent gw and sw
gwsw.m2 = gwsw.m[gwsw.m$variable == "gw_perc" |
                   gwsw.m$variable == "sw_perc",]
names(gwsw.m2)[2] = "Water_Source"

# Change the name
library(plyr)
gwsw.m2$Water_Source = revalue(gwsw.m2$Water_Source, 
                  c("gw_perc"="Groundwater","sw_perc"="Surface Water"))
detach(package:plyr) 

ggplot() + geom_bar(aes(y = value, x = YEAR, fill = Water_Source), 
                    data = gwsw.m2, stat="identity")+
  ggtitle( "Drinking Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(x="",y="Percent in Violation")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) +# add axis lines
  scale_fill_grey()


#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

# Calculate % GW and SW in 1994 and 2016
GW_p = gwsw.m2[gwsw.m2$Water_Source == "Groundwater",]
SW_p = gwsw.m2[gwsw.m2$Water_Source == "Surface Water",]

GW_p[GW_p$YEAR == 1994,]$value
# 0.1617536
GW_p[GW_p$YEAR == 2016,]$value
# 0.2938648
100*(0.2938648-0.1617536)/0.1617536
#81.7% increase from 1994 to 2015

SW_p[SW_p$YEAR == 1994,]$value
# 0.1906298
SW_p[SW_p$YEAR == 2016,]$value
# 0.1083424
100*(0.1083424-0.1906298)/0.1906298
#43% decrease from 1994 to 2016


##^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
# Making Line Graph Version

ggplot(data = gwsw.m2, stat="identity",
       aes(y=value, x=YEAR, group=Water_Source, 
           colour=Water_Source,shape=Water_Source)) + 
  geom_line(size=1.5)+
   geom_point(size=4,fill="white") +
  ggtitle( "Drinking Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(x="",y="Percent in Violation")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=30))+
  #scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines


##############



```


# GW split by PWS Type
```{r}

GW_cws = GW[GW$PWS.Type == "Community water system",]
GW_ncws = GW[GW$PWS.Type == "Non-Transient non-community system" |
               GW$PWS.Type == "Transient non-community system",]

GW_cws_y = table(GW_cws$YEAR)
GW_ncws_y = table(GW_ncws$YEAR)

plot(GW_cws_y)
plot(GW_ncws_y)

# Check people served
summary(GW_ncws$Pop_Violated)


```




# GW vs SW All YEARS
```{r GW vs SW Count}

levels(factor(uniq_pws94$GW.or.SW))
nrow(uniq_pws94[uniq_pws94$GW.or.SW == '-',]) # 2
nrow(as.data.frame(unique(uniq_pws94$PWSID))) # 4949
nrow(uniq_pws94) # 12297

# remove uniq_pws94$GW.or.SW == '-'
uniq_pws94 = uniq_pws94[uniq_pws94$GW.or.SW != '-',] 

gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
gw_y = as.data.frame(table(gw$YEAR))
sum(gw_y$Freq)

sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]
sw_y = as.data.frame(table(sw$YEAR))
sum(sw_y$Freq)

ggplot(uniq_pws94, aes(x = factor(GW.or.SW))) + 
  geom_bar(aes(uniq_pws94$GW.or.SW))+
  ggtitle( "Number of NO3 Violations 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Total Number of Violations")+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))

# Adding percents to second y-axis ggplot

ggplot(uniq_pws94, aes(x = factor(GW.or.SW))) + 
  geom_bar(aes(uniq_pws94$GW.or.SW))+
  ggtitle( "Drinking Water Source 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Total Number of Violations")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  #theme(panel.background = element_blank())+ # remove grey background
  scale_y_continuous(labels = comma,
    limits = c(0, 12000),
    breaks=seq(0,12000,by=2000),
    sec.axis=sec_axis(~ . * 100/nrow(uniq_pws94), # formula to get % using left y-axis, 100 / total violations
                                       breaks=seq(0,100,by=10),
                                       name = "% of all Violations"))+
    theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))
  


# Find the proportion of violations from GW vs. SW
gws = nrow(uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]) # 8984
sws = nrow(uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]) # 481
100*gws/(gws+sws)
# 94.9% violations from GW and 5.1% from SW

# What is the percent of GW violations based on total number of GW systems
# Need Inventory at GW vs. SW Level.  



```

#  GW vs SW Stacked All YEARS 
```{r GW vs SW All YEARS Stacked}
# Add stacked bar for PWS.Type into each Water Source Bar
ggplot(data = uniq_pws94, aes(x = GW.or.SW, fill = PWS.Type ))+ 
    geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(fill = guide_legend(reverse=F))+
  ggtitle( "Water Source vs. PWS Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
  guides(fill = guide_legend(title="", reverse=FALSE))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=1,title="", reverse=FALSE))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))
  
# Find % of PWS TYPE in GW vs. SW
# See Section Percent of Violations from 2 categories 


# Add stacked bar for Facility Type into each Water Source Bar
# ggplot(data = uniq_pws94, aes(x = GW.or.SW, fill = FACILITY_TYPE_DESCRIPTION ))+ 
#     geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# guides(fill = guide_legend(reverse=F))+
#   ggtitle( "Number of NO3 GW vs. SW Violations by Facility Type")+
#   labs(x=" ",y="Number of Violations")+
#       theme(axis.title=element_text(size=15))+
#       theme(axis.text=element_text(size=15))+
#       theme(plot.title=element_text(size=15))+
#       theme(legend.text=element_text(size=15))+
#       theme(legend.title=element_text(size=15))



# Add stacked bar for Facility Type into Just Surface Water
# sw = uniq_pws94[uniq_pws94$GW.or.SW=="Surface water",]
# 
# ggplot(data = sw, aes(x = GW.or.SW, fill = FACILITY_TYPE_DESCRIPTION ))+ 
#     geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# guides(fill = guide_legend(reverse=F))+
#   ggtitle( "Number of NO3 Surface Water Violations by Facility Type")+
#   labs(x=" ",y="Number of Violations")+
#       theme(axis.title=element_text(size=15))+
#       theme(axis.text=element_text(size=15))+
#       theme(plot.title=element_text(size=15))+
#       theme(legend.text=element_text(size=15))+
#       theme(legend.title=element_text(size=15))


```




# GW vs. SW POP ALL YEAR 1994-2016
```{r GW vs SW POP ALL years}

# This finds the total number of people Served from 1994-2015 
# by summing the number of people Served per year
library(scales)
ggplot(uniq_pws94, aes(x = factor(GW.or.SW))) + 
  geom_bar(aes(uniq_pws94$GW.or.SW, weight = uniq_pws94$Pop_Violated))+
  ggtitle( "Number of People Served by NO3 Violators 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Total People Served")+
   scale_y_continuous(labels = comma)+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))

# This finds the number of people Served per year 
library(scales)
ggplot(uniq_pws94, aes(x = factor(GW.or.SW))) + 
  geom_bar(aes(uniq_pws94$GW.or.SW, weight = uniq_pws94$Pop_Violated/22))+
  ggtitle( "Number of People Served by NO3 Violators 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="People Served Per Year")+
   scale_y_continuous(labels = comma)+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))

# With Secondary y-axis
gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]

sum(gw$Pop_Violated)/23
sum(sw$Pop_Violated)/23
(sum(sw$Pop_Violated)+sum(gw$Pop_Violated))/23


library(scales)
ggplot(uniq_pws94, aes(x = factor(GW.or.SW))) + 
  geom_bar(aes(uniq_pws94$GW.or.SW, weight = uniq_pws94$Pop_Violated/23))+
  ggtitle( "Drinking Water Source 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="People Served Per Year")+
  theme(axis.title=element_text(size=28))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(plot.margin= unit(c(0,0.2,0.2,0),"cm"))+
  scale_y_continuous(labels = comma,
                limits = c(0,500000),breaks=seq(0,500000,by=100000),
                    sec.axis=sec_axis(~ . *(100/sum(uniq_pws94$Pop_Violated))*(max(uniq_pws94$YEAR)-min(uniq_pws94$YEAR)+1), # formula to get % using left y-axis, divide by total number of people served times number of years of data
                                       breaks=seq(0,100,by=10),
                                       name = "% of People Served by Violators"))+
    theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))




# Find the % of people served by GW vs. SW systems in violation

gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]

sum(gw$Pop_Violated)/23
sum(sw$Pop_Violated)/23

# % people served by GW = 
100*(sum(gw$Pop_Violated)/23)/
  ((sum(gw$Pop_Violated)/23)+(sum(sw$Pop_Violated)/23))
# 37% People Served by GW and 63% by SW


```


# GW vs. SW Median People Served
```{r GW vs. SW Median People Served}


gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]
median(gw$Pop_Violated) # 99
median(sw$Pop_Violated) # 870

min(gw$Pop_Violated)
max(gw$Pop_Violated) 

min(sw$Pop_Violated)
max(sw$Pop_Violated)

# Boxplot
ggplot(uniq_pws94, aes(factor(GW.or.SW), Pop_Violated)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x="",y="People Served")+
  scale_y_log10(breaks= c(100,1000,10000,100000,1000000))+  
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=20))


```



# GW vs. SW State Violations
```{r GW vs. SW State Violations}

# subset by gw vs. sw
gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]

# summarize by state

library(dplyr)
gw_state <- gw %>% group_by(Primacy.Agency) %>% summarize(Freq = n()) # finds max duration for each group

sw_state <- sw %>% group_by(Primacy.Agency) %>% summarize(Freq = n()) # finds max duration for each group

# Remove region 9 
gw_state = gw_state[!grepl("EPA Region 9", gw_state$Primacy.Agency), ]

sw_state = sw_state[!grepl("EPA Region 9", sw_state$Primacy.Agency), ]

# Remove US Virgin Islands
gw_state = gw_state[!grepl("US Virgin Islands", gw_state$Primacy.Agency), ]
names(gw_state) = c("State","Violations")

sw_state = sw_state[!grepl("US Virgin Islands", sw_state$Primacy.Agency), ]
names(sw_state) = c("State","Violations")


#write.csv(gw_state, file = paste0(m_dir,"Projects/SDWIS/SDWIS_Violations_GW_State_1994-2016 updated.csv"), row.names=F)

#write.csv(sw_state, file = paste0(m_dir,"Projects/SDWIS/SDWIS_Violations_SW_State_1994-2016 updated.csv"), row.names=F)


```

# GW vs. SW State Mean Annual Violations
```{r}

library(dplyr)
# Calc number of violations per state and year
state_gw_year <- gw %>% 
  dplyr::group_by(Primacy.Agency,YEAR) %>% 
  summarize(gw_viol = n())

state_sw_year <- sw %>% 
  dplyr::group_by(Primacy.Agency,YEAR) %>% 
  summarize(sw_viol = n())

# find mean number of vioaltions per state
state_gw_mean <- state_gw_year %>% 
  dplyr::group_by(Primacy.Agency) %>% 
  summarize(gw_viol_mean = mean(gw_viol),
            gw_viol_sd = sd(gw_viol),
            gw_viol_se = gw_viol_sd/sqrt(23))

state_sw_mean <- state_sw_year %>% 
  dplyr::group_by(Primacy.Agency) %>% 
  summarize(sw_viol_mean = mean(sw_viol),
            sw_viol_sd = sd(sw_viol),
            sw_viol_se = sw_viol_sd/sqrt(23))

# write.csv(state_gw_mean, file = paste0(m_dir,"Projects/SDWIS/Mean_Violations_GW_State_1994-2016 updated.csv"), row.names=F)
# 
# write.csv(state_sw_mean, file = paste0(m_dir,"Projects/SDWIS/Mean_Violations_SW_State_1994-2016 updated.csv"), row.names=F)
# 
# 

```



# PWS Type OVER TIME
```{r PWS Type Over Time}


library(RColorBrewer)
colourCount = length(unique(uniq_pws94$PWS.Type)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 


# Number of PWS.Type Violations Over Time  
#uniq_pws94$PWS.Type = as.factor(uniq_pws94$PWS.Type)

library(ggplot2)

ggplot(uniq_pws94,aes(x=factor(YEAR),y=..count..,
  fill=factor(PWS.Type,levels=c("Transient non-community system","Non-Transient non-community system","Community water system"))))+
  geom_bar()+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle( "PWS Type")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))#+ # add axis lines
  scale_fill_grey()

# this has includes all violations (including when PWSID has >1 in a year)
# ggplot(SDWIS, aes(x = factor(PWS.Type))) + 
#   geom_bar(aes(SDWIS$PWS.Type))+
#   ggtitle( "Number of NO3 Violations")+
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Numbers of PWS type in 1994 and 2015

# Counting the number of SW and GW violations for specific year
cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]
ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]

nrow(subset(cws,cws$YEAR == 2015))

nrow(subset(tncws,tncws$YEAR == 1994))
nrow(subset(ntncws,ntncws$YEAR == 1994))
# 117+20 in 1994
# 182+75 in 2015

```


# PWS Type PEOPLE OVER TIME
```{r People Served over time}


# old fisrt part of code, new code puts CWS on bottom
# ggplot(uniq_pws94)+
#   geom_bar(aes(x=factor(YEAR),y=..count..,fill=PWS.Type, 
#                weight = uniq_pws94$Pop_Violated))+

library(RColorBrewer)
colourCount = length(unique(uniq_pws94$PWS.Type)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 


# Number of PWS.Type Violations Over Time  
#uniq_pws94$PWS.Type = as.factor(uniq_pws94$PWS.Type)

library(scales)
library(ggplot2)
ggplot(uniq_pws94)+
  geom_bar(aes(x=factor(YEAR),y=..count..,fill=factor(PWS.Type,levels=c("Transient non-community system","Non-Transient non-community system","Community water system")), 
               weight = uniq_pws94$Pop_Violated))+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle("PWS Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  guides(fill = guide_legend(title="PWS Type", reverse=TRUE))+
  labs(x="",y="Number of People Served")+
  scale_y_continuous(breaks= seq(0, 2000000, by = 200000),
                     labels=comma,expand=c(0,0))+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(legend.text=element_text(size=30))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))#+ # add axis lines
  scale_fill_grey()





```

# Inventory by PWS Type 
```{r Inventory by PWS Type}

#*******************************************************************
#*******************************************************************
# # no longer need this code because have inventory saved and is imported at beginning as invent_PWS_TYPE
#*******************************************************************
#*******************************************************************

# calculate the Number of Systems per PWS Type Per year

# first produce PWS.Type inventory
  
# remove rows with the string "Total""
# inventory_pws_type = inventoryPWS[!grepl("Total", inventoryPWS$State), ] # extracts rows without specific string
# 

# # Remove rows with region numbers in State field
# x = c("01","02","03","04","05","06","07","08","09","10")
# inventory_pws_type = inventory_pws_type[!grepl(paste(x, collapse = "|"), inventory_pws_type$State),]
# 
# # levels(factor(state_inventory$State)) # checks factors 
# # change columns that are factors to numeric 
# inventory_pws_type$TotSys.unknown = 
#   as.numeric(as.character(inventory_pws_type$TotSys.unknown)) 
# inventory_pws_type$TotPop.unknown = 
#   as.numeric(as.character(inventory_pws_type$TotPop.unknown)) 
# 
# # aggregate by year
# library(dplyr)
# inventory_pws_type_yr <- inventory_pws_type %>% group_by(YEAR) %>% 
#   summarize(TotSys.CWS = sum(TotSys.CWS,na.rm=T),
#             TotPop.CWS = sum(TotPop.CWS,na.rm=T),
#             TotSys.NTNCWS = sum(TotSys.NTNCWS,na.rm=T),
#             TotPop.NTNCWS = sum(TotPop.NTNCWS,na.rm=T),
#             TotSys.TNCWS = sum(TotSys.TNCWS,na.rm=T),
#             TotPop.TNCWS = sum(TotPop.TNCWS,na.rm=T))
# 
# 
# invntry_pws = inventory_pws_type_yr

#write.csv(invntry_pws, file = paste0(m_dir,"Projects/SDWIS/Inventory_PWS_TYPE_1994-2016.csv"),row.names=F)



```

# PWS Type % OVER TIME in violation  

```{r PWS Type % OVER TIME in violation  }

###***###***###***###***###***###***###***###***###***###***
# Find number of each PWS.Type per year in the SDWIS violations data

# subset out the SDWIS Data by PWS Type
cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]
ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]

ncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system" | uniq_pws94$PWS.Type == "Transient non-community system",]

nrow(ncws) # 7667
nrow(tncws)+nrow(ntncws) # 7667

# Aggregate by year for each PWS Type
library(dplyr)

cws_yr <- cws %>% dplyr::group_by(YEAR) %>% summarize(Freq.cws = n_distinct(PWSID))
tncws_yr <- tncws %>% dplyr::group_by(YEAR) %>% summarize(Freq.tncws = n_distinct(PWSID))
ntncws_yr <- ntncws %>% dplyr::group_by(YEAR) %>% summarize(Freq.ntncws = n_distinct(PWSID))
ncws_yr <- ncws %>% dplyr::group_by(YEAR) %>% summarize(Freq.ncws = n_distinct(PWSID))

# Merge them back together (multiple merge)

lst = list(cws_yr,tncws_yr,ntncws_yr)
lst2 = list(cws_yr,ncws_yr) # for CWS and NCWS

pws_type_yr1 = as.data.frame(Reduce(function(x, y) merge(x, y, by="YEAR", all=TRUE), lst))

pws_type_yr1_ = as.data.frame(Reduce(function(x, y) merge(x, y, by="YEAR", all=TRUE), lst2)) # for CWS and NCWS

####&&&&######&&&&&&&&&###########&&&&&&&&&&&##########&&&&&&&&&&&#
# Merge the inventory with the Violations data

pws_type_yr = merge(pws_type_yr1,invent_PWS_TYPE,by="YEAR",all.x=T)
pws_type_yr2 = merge(pws_type_yr1_,invent_PWS_TYPE,by="YEAR",all.x=T)

# calculate perc systems in violation for each PWS Type
pws_type_yr$perc_cws = 100*pws_type_yr$Freq.cws/pws_type_yr$TotSys.CWS  
pws_type_yr$perc_tncws = 100*pws_type_yr$Freq.tncws/pws_type_yr$TotSys.TNCWS  
pws_type_yr$perc_ntncws = 100*pws_type_yr$Freq.ntncws/pws_type_yr$TotSys.NTNCWS 

# Calculate TotSys.NCWS
pws_type_yr2$TotSys.NCWS = pws_type_yr2$TotSys.TNCWS + pws_type_yr2$TotSys.NTNCWS
pws_type_yr2$perc_cws = 100*pws_type_yr2$Freq.cws/pws_type_yr2$TotSys.CWS  
pws_type_yr2$perc_ncws = 100*pws_type_yr2$Freq.ncws/pws_type_yr2$TotSys.NCWS  


####################################
# Plot 

# Extract out the percent data 
pws_type_yr_perc = pws_type_yr[,c("YEAR","perc_cws","perc_tncws","perc_ntncws")] # based on column names

pws_type_yr_perc_ = pws_type_yr2[,c("YEAR","perc_cws","perc_ncws")] 

# Rearrange df so it is in long form, not wide form (transpose)
library(reshape)
pws_type_yr_perc2 <- melt(pws_type_yr_perc, id.vars = "YEAR")
names(pws_type_yr_perc2)[3] = "perc_viol"

pws_type_yr_perc2_ <- melt(pws_type_yr_perc_, id.vars = "YEAR")
names(pws_type_yr_perc2_)[3] = "perc_viol"

# Add in the full PWS Type Names as a new field
library(plyr)
pws_type_yr_perc2$PWS.Type = revalue(pws_type_yr_perc2$variable, 
                  c("perc_cws"="Community water system",
                    "perc_tncws"="Transient non-community system",
                    "perc_ntncws"="Non-Transient non-community system"))
 

pws_type_yr_perc2_$PWS.Type = revalue(pws_type_yr_perc2_$variable, 
                  c("perc_cws"="Community water system",
                    "perc_ncws"="Non-community water system"))
detach(package:plyr)
#labels=c("Trans non-community","Non-trans non-community","Community")

library(dplyr)
# % in Violation for PWS Type Over Time
ggplot(pws_type_yr_perc2,aes(x=factor(YEAR),y=perc_viol,fill=factor(PWS.Type,levels=c("Transient non-community system","Non-Transient non-community system","Community water system"))))+
  geom_bar(stat="identity")+
  ggtitle( "PWS Type")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="% Systems in Violation")+
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(breaks=seq(0,1,by=0.2),expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))+ # add axis lines
  scale_fill_grey()


ggplot(pws_type_yr_perc2,aes(x=factor(YEAR),y=perc_viol,fill=factor(PWS.Type,levels=c("Community water system", "Transient non-community system","Non-Transient non-community system"))))+
  geom_bar(stat="identity")+
  ggtitle( "PWS Type")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="% Systems in Violation")+
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(legend.text=element_text(size=30))+
  scale_y_continuous(breaks=seq(0,1,by=0.2),expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))+ # add axis lines
  scale_fill_grey()

# Calculate Percent in 1994 and 2016
cws_p = pws_type_yr_perc2[pws_type_yr_perc2$PWS.Type == "Community water system",]
ntncws_p = pws_type_yr_perc2[pws_type_yr_perc2$PWS.Type == "Non-Transient non-community system",]
tncws_p = pws_type_yr_perc2[pws_type_yr_perc2$PWS.Type == "Transient non-community system",]

cws_p[cws_p$YEAR == 1994,]$perc_viol
# 0.2650996
cws_p[cws_p$YEAR == 2016,]$perc_viol
# 0.3216456
100*(0.3216456-0.2650996)/0.2650996
# 21% increase


ntncws_p[ntncws_p$YEAR == 1994,]$perc_viol
# 0.09993005
ntncws_p[ntncws_p$YEAR == 2016,]$perc_viol
# 0.3951689
tncws_p[tncws_p$YEAR == 1994,]$perc_viol
# 0.1221728
tncws_p[tncws_p$YEAR == 2016,]$perc_viol
# 0.2210038
0.09993005+0.1221728 # ntncws+tncws
# 0.2221029 for non cws in 1994
0.3951689+0.2210038 # ntncws+tncws
# 0.6161727 for non cws in 2016
100*(0.6161727-0.2221029)/0.2221029
# 177.4267 increase 

##^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
# Making Line Graph Version

ggplot(data= pws_type_yr_perc2, stat="identity",
       aes(y=perc_viol, x=YEAR, group=PWS.Type, 
           colour=PWS.Type,shape=PWS.Type)) + 
  geom_line(size=1.5)+
   geom_point(size=4,fill="white") +
  ggtitle( "PWS Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(x="",y="Percent in Violation")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=30))+
  #scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines

##^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
# Plot with just Community and Non-Community Systems

ggplot(data= pws_type_yr_perc2_, stat="identity",
       aes(y=perc_viol, x=YEAR, group=PWS.Type, 
           colour=PWS.Type,shape=PWS.Type)) + 
  geom_line(size=1.5)+
   geom_point(size=4,fill="white") +
  ggtitle( "PWS Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
    labs(x="",y="Percent in Violation")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.title=element_blank())+
  theme(legend.text=element_text(size=30))+
  #scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines



```




# PWS.Type ALL YEARS NUMBERS
```{r PWS.Type Number Violations All Years}

# Just CWS vs. non-CWS

# Merge the 2 non-cWS together
library(plyr) # new name is on right
uniq_pws94$PWS.Type3 = revalue(uniq_pws94$PWS.Type,c("Transient non-community system"="Non-community water system","Non-Transient non-community system"="Non-community water system", "Community water system"="Community water system"))
detach(package:plyr) 

levels(factor(uniq_pws94$PWS.Type3))

library(stringr)
uniq_pws94$PWS.Type4 = str_wrap(uniq_pws94$PWS.Type3, width=15)

levels(factor(uniq_pws94$PWS.Type4))


ggplot(uniq_pws94, aes(x = factor(PWS.Type4))) + 
  geom_bar(aes(uniq_pws94$PWS.Type4))+
  ggtitle( "PWS Type 1994-2016")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  labs(x=" ",y="Total Number of Violations")+
  theme(axis.title=element_text(size=28))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  scale_y_continuous(labels = comma,
    limits = c(0, 8000),breaks=seq(0,8000,by=1000),
                    sec.axis=sec_axis(~ . * 100/nrow(uniq_pws94), # formula to get % using left y-axis, 100 / total violations
                    breaks=seq(0,100,by=10),
                    name = "% of all Violations"))+
      theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))




#**********************************
library(ggplot2)
ggplot(uniq_pws94, aes(x = factor(PWS.Type))) + 
  geom_bar(aes(uniq_pws94$PWS.Type))+
  ggtitle( "Number of NO3 Violations 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
      theme(plot.title=element_text(size=25))+
      theme(axis.title=element_text(size=25))+
      theme(axis.text=element_text(size=25))


# Secondary y-axis for % of each type

library(stringr)
# this is used to wrap the PWS.Type names for the bar plot
uniq_pws94$PWS.Type2 = str_wrap(uniq_pws94$PWS.Type, width=20)

ggplot(uniq_pws94, aes(x = factor(PWS.Type2))) + 
  geom_bar(aes(uniq_pws94$PWS.Type2))+
  ggtitle( "PWS Type 1994-2016")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  labs(x=" ",y="Total Number of Violations")+
  theme(axis.title=element_text(size=28))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  scale_y_continuous(labels = comma,
    limits = c(0, 6000),breaks=seq(0,6000,by=1000),
                    sec.axis=sec_axis(~ . * 100/nrow(uniq_pws94), # formula to get % using left y-axis, 100 / total violations
                    breaks=seq(0,100,by=10),
                    name = "% of all Violations"))+
      theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))


test = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]
test = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]

cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]

# % of violations from CWS
100*nrow(cws)/nrow(uniq_pws94)






```


# PWS.Type STACKED ALL YEARS NUMBERS
```{r PWS.Type STACKED ALL YEARS NUMBER}


# Add stacked bar for Owner.Type into each PWS.Type Bar
# use this code if haven't used it for PWS.Type Number
#library(stringr)
# this is used to wrap the PWS.Type names for the bar plot
#uniq_pws94$PWS.Type2 = str_wrap(uniq_pws94$PWS.Type, width=20)


ggplot(data = uniq_pws94, aes(x = PWS.Type2, fill = Owner.Type))+ 
    geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
guides(fill = guide_legend(reverse=F))+
  ggtitle( "PWS Type vs. Owner Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
  guides(fill = guide_legend(title="", reverse=FALSE))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=2,title="", reverse=FALSE))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))
  
#**
  # labs(x=" ",y="Number of Violations")+
  #     theme(axis.title=element_text(size=15))+
  #     theme(axis.text=element_text(size=15))+
  #     theme(plot.title=element_text(size=15))+
  #     theme(legend.text=element_text(size=15))+
  #     theme(legend.title=element_text(size=15))

# Add stacked bar for water source  into each PWS.Type Bar
# ggplot(data = uniq_pws94, aes(x = PWS.Type, fill = GW.or.SW))+ 
#     geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# guides(fill = guide_legend(reverse=F))+
#   ggtitle( "Number of NO3 Violations by Facility Type")+
#   labs(x=" ",y="Number of Violations")+
#       theme(axis.title=element_text(size=15))+
#       theme(axis.text=element_text(size=15))+
#       theme(plot.title=element_text(size=15))+
#       theme(legend.text=element_text(size=15))+
#       theme(legend.title=element_text(size=15))


```



# PWS TYPE POP All YEARS 1994-2016
```{r PWS Type Pop Served All Years}

# Just CWS vs. non-CWS

ggplot(uniq_pws94, aes(x = factor(PWS.Type4))) + 
  geom_bar(aes(uniq_pws94$PWS.Type4, weight = uniq_pws94$Pop_Violated/23))+
  ggtitle( "PWS Type 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="People Served per Year")+
  theme(axis.title=element_text(size=25))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(plot.margin= unit(c(0,0.2,0.2,0),"cm"))+
  scale_y_continuous(labels = comma,
                limits = c(0,700000),breaks=seq(0,700000,by=100000),
                    sec.axis=sec_axis(~ . *(100/sum(uniq_pws94$Pop_Violated))*(max(uniq_pws94$YEAR)-min(uniq_pws94$YEAR)+1), # formula to get % using left y-axis, divide by total number of people served times number of years of data
                                       breaks=seq(0,100,by=10),
                                       name = "% of People Served by Violators"))+
        theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))
#*****************************************

# this is total people served by summing the people impacted each year
library(scales)
# ggplot(uniq_pws94, aes(x = factor(PWS.Type))) + 
#   geom_bar(aes(uniq_pws94$PWS.Type, weight = uniq_pws94$Pop_Violated))+
#   ggtitle( "Number of People Served by NO3 Violators 1994-2015")+
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))+
#   scale_y_continuous(labels = comma)+
#   labs(x=" ",y="Total People Served")+
#       theme(plot.title=element_text(size=25))+
#       theme(axis.title=element_text(size=25))+
#       theme(axis.text=element_text(size=25))

cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]
tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]

mean(cws$Pop_Violated) # 3889.93
mean(ntncws$Pop_Violated) # 272.1921
mean(tncws$Pop_Violated) # 125.5502

sum(cws$Pop_Violated)/22 # 729715.5
sum(ntncws$Pop_Violated)/22 # 16554.23
sum(tncws$Pop_Violated)/22 # 23141.18

# This is people served per PWS Type per year
ggplot(uniq_pws94, aes(x = factor(PWS.Type))) + 
  geom_bar(aes(uniq_pws94$PWS.Type, weight = uniq_pws94$Pop_Violated/22))+
  ggtitle( "Number of People Serverd by NO3 Violators 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  scale_y_continuous(labels = comma)+
  labs(x=" ",y="Total People Served per Year")+
      theme(plot.title=element_text(size=20))+
      theme(axis.title=element_text(size=20))+
      theme(axis.text=element_text(size=20))


# Secondary y-axis

# use this code if haven't used it for PWS.Type Number
#library(stringr)
# this is used to wrap the PWS.Type names for the bar plot
#uniq_pws94$PWS.Type2 = str_wrap(uniq_pws94$PWS.Type, width=20)

ggplot(uniq_pws94, aes(x = factor(PWS.Type2))) + 
  geom_bar(aes(uniq_pws94$PWS.Type2, weight = uniq_pws94$Pop_Violated/23))+
  ggtitle( "PWS Type 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="People Served per Year")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(plot.margin= unit(c(0,0.2,0.2,0),"cm"))+
  scale_y_continuous(labels = comma,
                limits = c(0,700000),breaks=seq(0,700000,by=100000),
                    sec.axis=sec_axis(~ . *(100/sum(uniq_pws94$Pop_Violated))*(max(uniq_pws94$YEAR)-min(uniq_pws94$YEAR)+1), # formula to get % using left y-axis, divide by total number of people served times number of years of data
                                       breaks=seq(0,100,by=10),
                                       name = "% of all People Served"))+
        theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))




```

# PWS Type Median number of people served 
```{r PWS Type Median number of people served}


cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]
tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]

median(cws$Pop_Violated) # 231
median(ntncws$Pop_Violated) # 100
median(tncws$Pop_Violated) #  50


pws_median = as.data.frame(c("Community water system","Non-Transient non-community system","Transient non-community system"))
names(pws_median)[1] = "PWS.Type"
pws_median$median_pop = 0
pws_median$median_pop[1] = median(cws$Pop_Violated)
pws_median$median_pop[2] = median(ntncws$Pop_Violated)
pws_median$median_pop[3] = median(tncws$Pop_Violated)
  
# ggplot(pws_median, aes(x= factor(PWS.Type),y=median_pop)) + 
#   geom_bar("identity")+
#   ggtitle( "Number of People Serverd by NO3 Violators 1994-2015")+
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))+
#   scale_y_continuous(labels = comma)+
#   labs(x=" ",y="Median People Served per Year")+
#       theme(plot.title=element_text(size=20))+
#       theme(axis.title=element_text(size=20))+
#       theme(axis.text=element_text(size=20))


# Boxplot

# this is used to wrap the PWS.Type names for the bar plot
uniq_pws94$PWS.Type2 = str_wrap(uniq_pws94$PWS.Type, width=20)

ggplot(uniq_pws94, aes(factor(PWS.Type2), Pop_Violated)) + 
  geom_boxplot() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x="",y="People Served")+
  scale_y_log10(breaks= c(100,1000,10000,100000,1000000))+ 
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line())+ # adds axis lines
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=20))



```



# Owner Type OVER TIME Violations
```{r Owner Type Over Time}

levels(factor(uniq_pws94$Owner.Type))
nrow(uniq_pws94[uniq_pws94$Owner.Type == "Unknown Owner Type",]) # just 1
# remove the "Unknown Owner Type"
nrow(uniq_pws94) # 12297
uniq_pws94 = uniq_pws94[uniq_pws94$Owner.Type != "Unknown Owner Type",]
nrow(uniq_pws94) # 12296

library(RColorBrewer)
colourCount = length(unique(uniq_pws94$Owner.Type)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 


# Owner Type Violations Over Time  
p<-ggplot(subset(uniq_pws94,Owner.Type="Private"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=factor(Owner.Type,levels=c('Private','Local government','Public/Private',"Federal government","State government",
                                    "Native American"))))+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle( "Owner Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
  guides(fill = guide_legend(title="", reverse=FALSE))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=2,title="",reverse=FALSE,keyheight=2,keywidth = 1.5))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  #guides(fill=guide_legend(keywidth=0.1,keyheight=0.1,default.unit="inch"))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))  #+# add axis lines
  #scale_fill_grey()


# Calculate the number of privately owned systems in 1994 and 2015
priv = uniq_pws94[uniq_pws94$Owner.Type == "Private",]

nrow(subset(priv,priv$YEAR == 1994))
nrow(subset(priv,priv$YEAR == 2015))






```


# Owner Type POP OVER TIME
```{r Owner Type POP OVER TIME}

library(RColorBrewer)
colourCount = length(unique(uniq_pws94$Owner.Type)) # number of colors I need

# function to produce number of colors I need based on specific pallet e.g. Set1
# this function interpolated between the given colors to increase the number of colors
mypal = colorRampPalette(brewer.pal(9,"Set1")) # 


# People Served by Owner Type Over Time
library(scales)
library(ggplot2)
p<-ggplot(subset(uniq_pws94,Owner.Type="Private"),aes(x=YEAR))
p+geom_bar(aes(x=factor(YEAR),y=..count..,fill=factor(Owner.Type,levels=c('Private','Local government','Public/Private',"Federal government","State government", "Native American")), 
               weight = uniq_pws94$Pop_Violated))+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle("Owner Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x="",y="Number of People Served")+
  scale_y_continuous(breaks= seq(0, 2000000, by = 200000),
                     labels=comma,expand=c(0,0))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=2,title="", reverse=FALSE,
                             keyheight=2,keywidth = 1.5))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) #+# add axis lines
  #scale_fill_grey()

```



# Owner TYPE ALL YEARS
```{r Owner Type All Years}

# Remove the one "Unknown Owner Type",
nrow(uniq_pws94[uniq_pws94$Owner.Type == "Unknown Owner Type",])
nrow(uniq_pws94) # 12297
uniq_pws94 = uniq_pws94[uniq_pws94$Owner.Type != "Unknown Owner Type",]
nrow(uniq_pws94) # 12296

# Violations per Owner Type All Years
ggplot(uniq_pws94, aes(x = factor(Owner.Type))) + 
  geom_bar(aes(uniq_pws94$Owner.Type))+
  ggtitle( "Number of NO3 Violations by Owner Type")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x="PWS Owner Type",y="Number of Violations")+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30))

# Secondary y-axis
ggplot(uniq_pws94, aes(x = factor(Owner.Type))) + 
  geom_bar(aes(uniq_pws94$Owner.Type))+
  ggtitle( "Owner Type 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Total Number of Violations")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=30))+
  scale_y_continuous(labels = comma,
    limits = c(0, 9000),breaks=seq(0,9000,by=1000),
                     sec.axis=sec_axis(~ . * 100/nrow(uniq_pws94), # formula to get % using left y-axis, 100 / total violations
                                       breaks=seq(0,100,by=10),
                                       name = "% of all Violations"))+
          theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))


```


# Owner TYPE STACKED ALL YEARS 
```{r Owner TYPE STACKED ALL YEARS }

# Add stacked bar for PWS.Type into each Owner.Type Bar
# ggplot(data = uniq_pws94, aes(x = Owner.Type, fill = PWS.Type))+ 
#     geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# guides(fill = guide_legend(reverse=TRUE))+
#   ggtitle( "Number of NO3 Violations by Owner Type")+
#   labs(x=" ",y="Number of Violations")+
#       theme(axis.title=element_text(size=25))+
#       theme(axis.text=element_text(size=25))+
#       theme(plot.title=element_text(size=25))+
#       theme(legend.text=element_text(size=18))+
#       theme(legend.title=element_text(size=15))

# stacked bar for Facility.Type into each Owener.Type bar
# ggplot(data = uniq_pws94, aes(x = Owner.Type, fill = FACILITY_TYPE_DESCRIPTION))+ 
#     geom_bar()+ theme(axis.text.x = element_text(angle = 45, hjust = 1))+
# guides(fill = guide_legend(reverse=TRUE))+
#   ggtitle( "Number of NO3 Violations by Owner Type")+
#   labs(x=" ",y="Number of Violations")+
#       theme(axis.title=element_text(size=25))+
#       theme(axis.text=element_text(size=25))+
#       theme(plot.title=element_text(size=25))+
#       theme(legend.text=element_text(size=18))+
#       theme(legend.title=element_text(size=15))

# stacked bar for Water Source into each Owener.Type bar
ggplot(data = uniq_pws94, aes(x = Owner.Type, fill = GW.or.SW))+ 
  geom_bar()+ 
  ggtitle( "Owner Type vs. Water Source")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Number of Violations")+
  guides(fill = guide_legend(title="", reverse=FALSE))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=28))+
  theme(plot.title=element_text(size=35,hjust=0.5))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=2,title="", reverse=FALSE))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical",
        legend.box="horizontal")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))

#***********************************************
# See # Percent of violations from 2 categories


```



# Owner Type Pop All YEARS Served
```{r Owner Type People Served}


# People Served by Owner Type per year
library(scales)
ggplot(uniq_pws94, aes(x = factor(Owner.Type))) + 
  geom_bar(aes(uniq_pws94$Owner.Type, weight = uniq_pws94$Pop_Violated/22))+
 ggtitle( "Number of People Served by NO3 Violators 1994-2015")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  scale_y_continuous(labels = comma)+
  labs(x="PWS Owner Type",y="People Served per Year")+
      theme(plot.title=element_text(size=30))+
      theme(axis.title=element_text(size=30))+
      theme(axis.text=element_text(size=30))

# Secondary y-axis
library(scales)
ggplot(uniq_pws94, aes(x = factor(Owner.Type))) + 
  geom_bar(aes(uniq_pws94$Owner.Type, weight = uniq_pws94$Pop_Violated/22))+
 ggtitle( "Owner Type 1994-2016")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="People Served Per Year")+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(plot.margin= unit(c(0,0.2,0.2,0),"cm"))+
  scale_y_continuous(labels = comma,
                limits = c(0,700000),breaks=seq(0,700000,by=100000),
                    sec.axis=sec_axis(~ . *(100/sum(uniq_pws94$Pop_Violated))*(max(uniq_pws94$YEAR)-min(uniq_pws94$YEAR)+1), # formula to get % using left y-axis, divide by total number of people served times number of years of data
                                       breaks=seq(0,100,by=10),
                                       name = "% of all People Served"))+
          theme(  # This removed grey and add border
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))




```





# See if a certain quarter/Month when violations are most prevalent for GW vs. SW
```{r Most common Quarter or Month for GW vs. SW violations}
# SDWIS94$QuarDec
# SDWIS94$QUARTER
# SDWIS94$Submission.Year.Quarter

# find frequency 
qrtr = as.data.frame(table(SDWIS94$QUARTER))
names(qrtr) = c("QUARTER","Freq_Q")

# subset out GW and SW
SDWIS94$MONTH = month(SDWIS94$DATE)
SDWIS94_gw = SDWIS94[SDWIS94$GW.or.SW == "Groundwater",]
SDWIS94_sw = SDWIS94[SDWIS94$GW.or.SW == "Surface water",]

qrtr_gw = as.data.frame(table(SDWIS94_gw$QUARTER))
names(qrtr_gw) = c("QUARTER","Freq_Q_sw")

qrtr_sw = as.data.frame(table(SDWIS94_sw$QUARTER))
names(qrtr_sw) = c("QUARTER","Freq_Q_sw")


# Most Common Month for violations  
mnth = as.data.frame(table(SDWIS94$MONTH))
names(mnth) = c("MONTH","Freq_M")

mnth_gw = as.data.frame(table(SDWIS94_gw$MONTH))
names(mnth_gw) = c("MONTH","Freq_M_sw")

mnth_sw = as.data.frame(table(SDWIS94_sw$MONTH))
names(mnth_sw) = c("MONTH","Freq_M_sw")


```



# Table 
* Table on State Data for specific years
```{r }
# Making State Table for Specific Years

# Remove region 9 
uniq_pws94_Nr9 = uniq_pws94[!grepl("EPA Region 9", uniq_pws94$Primacy.Agency), ]

# subset out by year, the usse table to find frequency of violations 
uniq_pws2012 = uniq_pws94_Nr9[uniq_pws94_Nr9$YEAR == 2012,]
state2012 = as.data.frame(table(uniq_pws2012$Primacy.Agency))

uniq_pws2013 = uniq_pws94_Nr9[uniq_pws94_Nr9$YEAR == 2013,]
state2013 = as.data.frame(table(uniq_pws2013$Primacy.Agency))

uniq_pws2014 = uniq_pws94_Nr9[uniq_pws94_Nr9$YEAR == 2014,]
state2014 = as.data.frame(table(uniq_pws2014$Primacy.Agency))

uniq_pws2015 = uniq_pws94_Nr9[uniq_pws94_Nr9$YEAR == 2015,]
state2015 = as.data.frame(table(uniq_pws2015$Primacy.Agency))
names(state2012) = c("STATE","Viol_Freq")
names(state2013) = c("STATE","Viol_Freq")
names(state2014) = c("STATE","Viol_Freq")
names(state2015) = c("STATE","Viol_Freq")

# Remove Region 9
state2012 = state2012[!state2012$STATE == "EPA Region 9", ]
state2013 = state2013[!state2013$STATE == "EPA Region 9", ]
state2014 = state2014[!state2014$STATE == "EPA Region 9", ]
state2015 = state2015[!state2015$STATE == "EPA Region 9", ]


# People served per state per year
library("questionr")
state_pop2012 = as.data.frame(wtd.table(x = uniq_pws2012$Primacy.Agency, weights = uniq_pws2012$Pop_Violated))

state_pop2013 = as.data.frame(wtd.table(x = uniq_pws2013$Primacy.Agency, weights = uniq_pws2013$Pop_Violated))

state_pop2014 = as.data.frame(wtd.table(x = uniq_pws2014$Primacy.Agency, weights = uniq_pws2014$Pop_Violated))

state_pop2015 = as.data.frame(wtd.table(x = uniq_pws2015$Primacy.Agency, weights = uniq_pws2015$Pop_Violated))
names(state_pop2012) = c("STATE","Pop_Served")
names(state_pop2013) = c("STATE","Pop_Served")
names(state_pop2014) = c("STATE","Pop_Served")
names(state_pop2015) = c("STATE","Pop_Served")

# State Inventory Per Year
# Subset out columns
state_invent = state_inventory[,c("YEAR","STATE","Tot_Systems","Tot_Sys_Pop")]

state_invent2012 = state_invent[state_invent$YEAR == 2012,]
state_invent2013 = state_invent[state_invent$YEAR == 2013,]
state_invent2014 = state_invent[state_invent$YEAR == 2014,]
state_invent2015 = state_invent[state_invent$YEAR == 2015,]

# Merge violations, pop served, and inventories together
st2012 = merge(state2012,state_pop2012,by="STATE")
st2012 = merge(st2012,state_invent2012,by.x="STATE")

st2013 = merge(state2013,state_pop2013,by="STATE")
st2013 = merge(st2013,state_invent2013,by.x="STATE")

st2014 = merge(state2014,state_pop2014,by="STATE")
st2014 = merge(st2014,state_invent2014,by.x="STATE")

st2015 = merge(state2015,state_pop2015,by="STATE")
st2015 = merge(st2015,state_invent2015,by.x="STATE")

# Calc Perc in Violation
st2012$Perc_Viol = 100*st2012$Viol_Freq/st2012$Tot_Systems
st2013$Perc_Viol = 100*st2013$Viol_Freq/st2013$Tot_Systems
st2014$Perc_Viol = 100*st2014$Viol_Freq/st2014$Tot_Systems
st2015$Perc_Viol = 100*st2015$Viol_Freq/st2015$Tot_Systems

# Calc Perc in Violation
st2012$Perc_Pop = 100*st2012$Pop_Served/st2012$Tot_Sys_Pop
st2013$Perc_Pop = 100*st2013$Pop_Served/st2013$Tot_Sys_Pop
st2014$Perc_Pop = 100*st2014$Pop_Served/st2014$Tot_Sys_Pop
st2015$Perc_Pop = 100*st2015$Pop_Served/st2015$Tot_Sys_Pop

# combining data into final output table 
table_state = rbind(st2012,st2013,st2014,st2015)
table_state = table_state[,c("STATE","YEAR","Viol_Freq","Pop_Served","Perc_Viol","Perc_Pop")]


```



# Table S2 Violations Per Category
```{r Table on Violations and pop served by water source, PWS type, Owner Type}

# Create a table 11 rows by 7 columns
Table = as.data.frame(matrix(data = NA, nrow=11, ncol=7))
names(Table) = c("Category","Type","Number_Violations","Perc_Viol","Perc_Systems","Avg_Pop_Served_per_Year","Perc_Pop_served_by_violators")

# change text for each row of specific column
Table$Category = c("Water Source","Water Source","PWS Type","PWS Type","PWS Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type")

levels(factor(uniq_pws94$GW.or.SW))
levels(factor(uniq_pws94$PWS.Type))
levels(factor(uniq_pws94$Owner.Type))

Table$Type = c("Ground water","Surface water","Community water system","Non-Transient non-community system","Transient non-community system","Federal government","Local government","Native American","Private","Public/Private","State government")


# Groundwater Violations (just change first 3 lines of following code)
variable = "Groundwater"
categor = uniq_pws94$GW.or.SW
inventory_variable = invent_gwsw$SW

df = uniq_pws94[uniq_pws94$GW.or.SW == variable,]
num = nrow(uniq_pws94[uniq_pws94$GW.or.SW == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[1,3]=num
Table[1,4]=Perc_Viol
Table[1,5]=Perc_Systems
Table[1,6]=Pop_Served
Table[1,7]=Perc_pop

# Surface Water Violations (just change first 3 lines of following code)
variable = "Surface water"
categor = uniq_pws94$GW.or.SW
inventory_variable = invent_gwsw$SW

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[2,3]=num
Table[2,4]=Perc_Viol
Table[2,5]=Perc_Systems
Table[2,6]=Pop_Served
Table[2,7]=Perc_pop

# Community water system Violations (just change first 3 lines of following code)
variable = "Community water system"
categor = uniq_pws94$PWS.Type
inventory_variable = invent_PWS_TYPE$TotSys.CWS


df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[3,3]=num
Table[3,4]=Perc_Viol
Table[3,5]=Perc_Systems
Table[3,6]=Pop_Served
Table[3,7]=Perc_pop

# Non-Transient non-community system Violations (just change first 3 lines of following code)
variable = "Non-Transient non-community system"
categor = uniq_pws94$PWS.Type
inventory_variable = invent_PWS_TYPE$TotSys.NTNCWS

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[4,3]=num
Table[4,4]=Perc_Viol
Table[4,5]=Perc_Systems
Table[4,6]=Pop_Served
Table[4,7]=Perc_pop

# Transient non-community system Violations (just change first 3 lines of following code)
variable = "Transient non-community system"
categor = uniq_pws94$PWS.Type
inventory_variable = invent_PWS_TYPE$TotSys.TNCWS

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[5,3]=num
Table[5,4]=Perc_Viol
Table[5,5]=Perc_Systems
Table[5,6]=Pop_Served
Table[5,7]=Perc_pop

# Federal government Violations (just change first 3 lines of following code)
variable = "Federal government"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[6,3]=num
Table[6,4]=Perc_Viol
Table[6,5]=Perc_Systems
Table[6,6]=Pop_Served
Table[6,7]=Perc_pop

# Local government Violations (just change first 3 lines of following code)
variable = "Local government"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[7,3]=num
Table[7,4]=Perc_Viol
Table[7,5]=Perc_Systems
Table[7,6]=Pop_Served
Table[7,7]=Perc_pop

# Native American Violations (just change first 3 lines of following code)
variable = "Native American"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[8,3]=num
Table[8,4]=Perc_Viol
Table[8,5]=Perc_Systems
Table[8,6]=Pop_Served
Table[8,7]=Perc_pop

# Private Violations (just change first 3 lines of following code)
variable = "Private"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[9,3]=num
Table[9,4]=Perc_Viol
Table[9,5]=Perc_Systems
Table[9,6]=Pop_Served
Table[9,7]=Perc_pop

# Public/Private Violations (just change first 3 lines of following code)
variable = "Public/Private"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[10,3]=num
Table[10,4]=Perc_Viol
Table[10,5]=Perc_Systems
Table[10,6]=Pop_Served
Table[10,7]=Perc_pop

# State government Violations (just change first 3 lines of following code)
variable = "State government"
categor = uniq_pws94$Owner.Type
inventory_variable = NA

df = uniq_pws94[categor == variable,]
num = nrow(uniq_pws94[categor == variable,]) 
Perc_Viol = 100*num/nrow(uniq_pws94)
Perc_Systems = 100*num/sum(inventory_variable)
Pop_Served = sum(df$Pop_Violated)/22
Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)

Table[11,3]=num
Table[11,4]=Perc_Viol
Table[11,5]=Perc_Systems
Table[11,6]=Pop_Served
Table[11,7]=Perc_pop



# Copy to clipboard Table
#write.csv(Table, file = "D:/temp/SDWIS_Table_1994-2016 updated.csv", row.names=F)

```

# Facility Violations Table Section
* No longer using this code
```{r}

# levels(factor(uniq_pws94$FACILITY_TYPE_DESCRIPTION))

# change text for each row of specific column
# Table$Category = c("Water Source","Water Source","PWS Type","PWS Type","PWS Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type","Facility Type")
# 
# levels(factor(uniq_pws94$GW.or.SW))
# levels(factor(uniq_pws94$PWS.Type))
# levels(factor(uniq_pws94$Owner.Type))
# levels(factor(uniq_pws94$FACILITY_TYPE_DESCRIPTION))
# 
# Table$Type = c("Cistern","Common Headers","Consecutive Connection","Distribution System/Zone","Intake","Non-piped","Other","Pressure Control","Pump Facility","Sampling Station","Spring","Storage","Treatment Plant","Well")

# Cistern Violations (just change first 3 lines of following code)
# variable = "Cistern"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[12,3]=num
# Table[12,4]=Perc_Viol
# Table[12,5]=Perc_Systems
# Table[12,6]=Pop_Served
# Table[12,7]=Perc_pop
# 
# 
# # Common Headers Violations (just change first 3 lines of following code)
# variable = "Common Headers"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[13,3]=num
# Table[13,4]=Perc_Viol
# Table[13,5]=Perc_Systems
# Table[13,6]=Pop_Served
# Table[13,7]=Perc_pop
# 
# # Consecutive Connection Violations (just change first 3 lines of following code)
# variable = "Consecutive Connection"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[14,3]=num
# Table[14,4]=Perc_Viol
# Table[14,5]=Perc_Systems
# Table[14,6]=Pop_Served
# Table[14,7]=Perc_pop
# 
# # Distribution System/Zone Violations (just change first 3 lines of following code)
# variable = "Distribution System/Zone"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[15,3]=num
# Table[15,4]=Perc_Viol
# Table[15,5]=Perc_Systems
# Table[15,6]=Pop_Served
# Table[15,7]=Perc_pop
# 
# # Intake Violations (just change first 3 lines of following code)
# variable = "Intake"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[16,3]=num
# Table[16,4]=Perc_Viol
# Table[16,5]=Perc_Systems
# Table[16,6]=Pop_Served
# Table[16,7]=Perc_pop
# 
# # Non-piped Violations (just change first 3 lines of following code)
# variable = "Non-piped"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[17,3]=num
# Table[17,4]=Perc_Viol
# Table[17,5]=Perc_Systems
# Table[17,6]=Pop_Served
# Table[17,7]=Perc_pop
# 
# # Other Violations (just change first 3 lines of following code)
# variable = "Other"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[18,3]=num
# Table[18,4]=Perc_Viol
# Table[18,5]=Perc_Systems
# Table[18,6]=Pop_Served
# Table[18,7]=Perc_pop
# 
# # Pressure Control Violations (just change first 3 lines of following code)
# variable = "Pressure Control"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[19,3]=num
# Table[19,4]=Perc_Viol
# Table[19,5]=Perc_Systems
# Table[19,6]=Pop_Served
# Table[19,7]=Perc_pop
# 
# # Pump Facility Violations (just change first 3 lines of following code)
# variable = "Pump Facility"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[20,3]=num
# Table[20,4]=Perc_Viol
# Table[20,5]=Perc_Systems
# Table[20,6]=Pop_Served
# Table[20,7]=Perc_pop
# 
# # Sampling Station Violations (just change first 3 lines of following code)
# variable = "Sampling Station"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[21,3]=num
# Table[21,4]=Perc_Viol
# Table[21,5]=Perc_Systems
# Table[21,6]=Pop_Served
# Table[21,7]=Perc_pop
# 
# # Spring Violations (just change first 3 lines of following code)
# variable = "Spring"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[22,3]=num
# Table[22,4]=Perc_Viol
# Table[22,5]=Perc_Systems
# Table[22,6]=Pop_Served
# Table[22,7]=Perc_pop
# 
# # Storage Violations (just change first 3 lines of following code)
# variable = "Storage"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[23,3]=num
# Table[23,4]=Perc_Viol
# Table[23,5]=Perc_Systems
# Table[23,6]=Pop_Served
# Table[23,7]=Perc_pop
# 
# # Treatment Plant Violations (just change first 3 lines of following code)
# variable = "Treatment Plant"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[24,3]=num
# Table[24,4]=Perc_Viol
# Table[24,5]=Perc_Systems
# Table[24,6]=Pop_Served
# Table[24,7]=Perc_pop
# 
# # Well Violations (just change first 3 lines of following code)
# variable = "Well"
# categor = uniq_pws94$FACILITY_TYPE_DESCRIPTION
# inventory_variable = NA
# 
# df = uniq_pws94[categor == variable,]
# num = nrow(uniq_pws94[categor == variable,]) 
# Perc_Viol = 100*num/nrow(uniq_pws94)
# Perc_Systems = 100*num/sum(inventory_variable)
# Pop_Served = sum(df$Pop_Violated)/22
# Perc_pop =  100*Pop_Served/(sum(uniq_pws94$Pop_Violated)/22)
# 
# Table[25,3]=num
# Table[25,4]=Perc_Viol
# Table[25,5]=Perc_Systems
# Table[25,6]=Pop_Served
# Table[25,7]=Perc_pop

```


# Table S3 Inventory Table 
```{r Table S3 for Inventory Data # 2}

# This table is mimicking the FY2008 Drinking Water Factoids table, but for 2016
sys = read.csv(paste0(m_dir,"Projects/SDWIS/PWS_All/system_inventory_2016.csv"))

# Create New Column with GW.or.SW

sys$GW.or.SW = ifelse(sys$Primary.Source  == "Ground water","Groundwater",
              ifelse(sys$Primary.Source  == "Ground water purchased","Groundwater",
              ifelse(sys$Primary.Source  == "Ground water under influence of surface water","Surface water",
              ifelse(sys$Primary.Source  == "Purchased ground water under influence of surface water","Surface water",
              ifelse(sys$Primary.Source  == "Surface water","Surface water",
              ifelse(sys$Primary.Source  == "Surface water purchased","Surface water","Surface water")
)))))

levels(factor(sys$GW.or.SW)) 


#*****************************
Invntry_table2 = as.data.frame(matrix(data = NA, nrow=13, ncol=5))
names(Invntry_table2) = c("Type","Category","Groundwater","Surface_water","Totals")

# change text for each row of specific column
# Invntry_table$Category = c("Water Source","Water Source","PWS Type","PWS Type","PWS Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type","Owner Type")

Invntry_table2$Type = c("CWS","CWS","CWS","CWS","NTNCWS","NTNCWS","NTNCWS","NTNCWS","TNCWS","TNCWS","TNCWS","TNCWS","Total")

Invntry_table2$Category = c("# Systems","Pop. Served","% of Systems","% of Pop","# Systems","Pop. Served","% of Systems","% of Pop","# Systems","Pop. Served","% of Systems","% of Pop","Total # System")

#***************************************
sys_a = sys[sys$Activity.Status == "Active",]
sys_a$Pop_Served = as.numeric(gsub(",","",sys_a$Population.Served.Count)) # remove commas
levels(factor(sys$PWS.Type)) # not sure what "Non-Public" means
levels(factor(sys$GW.or.SW)) # not sure what "Non-Public" means

nrow(as.data.frame(unique(sys_a$PWSID))) # confirms that have only unique PWSIDs


CWS_gw = sys_a[sys_a$GW.or.SW == "Groundwater" & sys_a$PWS.Type == "Community water system" ,]
NTNCWS_gw = sys_a[sys_a$GW.or.SW == "Groundwater" & sys_a$PWS.Type == "Non-Transient non-community system" ,]
TNCWS_gw = sys_a[sys_a$GW.or.SW == "Groundwater" & sys_a$PWS.Type == "Transient non-community system"  ,]

CWS_sw = sys_a[sys_a$GW.or.SW == "Surface water" & sys_a$PWS.Type == "Community water system" ,]
NTNCWS_sw = sys_a[sys_a$GW.or.SW == "Surface water" & sys_a$PWS.Type == "Non-Transient non-community system" ,]
TNCWS_sw = sys_a[sys_a$GW.or.SW == "Surface water" & sys_a$PWS.Type == "Transient non-community system"  ,]

#*************************************************
# Data for CWS
Invntry_table2$Groundwater[1] = nrow(CWS_gw)
Invntry_table2$Groundwater[2] = sum(CWS_gw$Pop_Served)

Invntry_table2$Surface_water[1] = nrow(CWS_sw)
Invntry_table2$Surface_water[2] = sum(CWS_sw$Pop_Served)

Invntry_table2$Totals[1] = Invntry_table2$Groundwater[1]+Invntry_table2$Surface_water[1]
Invntry_table2$Totals[2] = Invntry_table2$Groundwater[2]+Invntry_table2$Surface_water[2]

Invntry_table2$Groundwater[3] = 100*Invntry_table2$Groundwater[1]/Invntry_table2$Totals[1]
Invntry_table2$Groundwater[4] = 100*Invntry_table2$Groundwater[2]/Invntry_table2$Totals[2]
  
Invntry_table2$Surface_water[3] = 100*Invntry_table2$Surface_water[1]/Invntry_table2$Totals[1]
Invntry_table2$Surface_water[4] = 100*Invntry_table2$Surface_water[2]/Invntry_table2$Totals[2]

Invntry_table2$Totals[3] = Invntry_table2$Groundwater[3]+Invntry_table2$Surface_water[3]
Invntry_table2$Totals[4] = Invntry_table2$Groundwater[4]+Invntry_table2$Surface_water[4]

#*************************************************
# Data for NTNCWS
Invntry_table2$Groundwater[5] = nrow(NTNCWS_gw)
Invntry_table2$Groundwater[6] = sum(NTNCWS_gw$Pop_Served)

Invntry_table2$Surface_water[5] = nrow(NTNCWS_sw)
Invntry_table2$Surface_water[6] = sum(NTNCWS_sw$Pop_Served)

Invntry_table2$Totals[5] = Invntry_table2$Groundwater[5]+Invntry_table2$Surface_water[5]
Invntry_table2$Totals[6] = Invntry_table2$Groundwater[6]+Invntry_table2$Surface_water[6]

Invntry_table2$Groundwater[7] = 100*Invntry_table2$Groundwater[5]/Invntry_table2$Totals[5]
Invntry_table2$Groundwater[8] = 100*Invntry_table2$Groundwater[6]/Invntry_table2$Totals[6]
  
Invntry_table2$Surface_water[7] = 100*Invntry_table2$Surface_water[5]/Invntry_table2$Totals[5]
Invntry_table2$Surface_water[8] = 100*Invntry_table2$Surface_water[6]/Invntry_table2$Totals[6]

Invntry_table2$Totals[7] = Invntry_table2$Groundwater[7]+Invntry_table2$Surface_water[7]
Invntry_table2$Totals[8] = Invntry_table2$Groundwater[8]+Invntry_table2$Surface_water[8]

#*************************************************
# Data for NTNCWS
Invntry_table2$Groundwater[9] = nrow(TNCWS_gw)
Invntry_table2$Groundwater[10] = sum(TNCWS_gw$Pop_Served)

Invntry_table2$Surface_water[9] = nrow(TNCWS_sw)
Invntry_table2$Surface_water[10] = sum(TNCWS_sw$Pop_Served)

Invntry_table2$Totals[9] = Invntry_table2$Groundwater[9]+Invntry_table2$Surface_water[9]
Invntry_table2$Totals[10] = Invntry_table2$Groundwater[10]+Invntry_table2$Surface_water[10]

Invntry_table2$Groundwater[11] = 100*Invntry_table2$Groundwater[9]/Invntry_table2$Totals[9]
Invntry_table2$Groundwater[12] = 100*Invntry_table2$Groundwater[10]/Invntry_table2$Totals[10]
  
Invntry_table2$Surface_water[11] = 100*Invntry_table2$Surface_water[9]/Invntry_table2$Totals[9]
Invntry_table2$Surface_water[12] = 100*Invntry_table2$Surface_water[10]/Invntry_table2$Totals[10]

Invntry_table2$Totals[11] = Invntry_table2$Groundwater[11]+Invntry_table2$Surface_water[11]
Invntry_table2$Totals[12] = Invntry_table2$Groundwater[12]+Invntry_table2$Surface_water[12]

# Total # System
Invntry_table2$Groundwater[13] = Invntry_table2$Groundwater[1]+Invntry_table2$Groundwater[5]+Invntry_table2$Groundwater[9]
Invntry_table2$Surface_water[13]= Invntry_table2$Surface_water[1]+Invntry_table2$Surface_water[5]+Invntry_table2$Surface_water[9]

Invntry_table2$Totals[13] = Invntry_table2$Groundwater[13]+Invntry_table2$Surface_water[13]

##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>##<>



```

# % Violations All Years from 1 category 
* % of systems in violation by each category
```{r % Violations ALL YEARS}

#***********************************************************************
# For GW.or.SW Number of Violation
gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
100*nrow(gw)/nrow(uniq_pws94)
#95.44567%

sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]
100*nrow(sw)/nrow(uniq_pws94)
#4.554327%

# For GW.or.SW People Served
100*sum(gw$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#35.4916%

100*sum(sw$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#64.5084%

#***********************************************************************
# For PWS Type Number of Violations
cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
100*nrow(cws)/nrow(uniq_pws94)
#37.64639%

tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]
100*nrow(tncws)/nrow(uniq_pws94)
#48.17827%

ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]
100*nrow(ntncws)/nrow(uniq_pws94)
#14.17534%

# For PWS Type People Served
100*sum(cws$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#93.24572%

100*sum(tncws$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#4.069746%

100*sum(ntncws$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#2.684538%

#********************************************************************
# For Owner Type Number of Violations
lg = uniq_pws94[uniq_pws94$Owner.Type == "Local government",]
100*nrow(lg)/nrow(uniq_pws94)
#25.10573%

p = uniq_pws94[uniq_pws94$Owner.Type == "Private",]
100*nrow(p)/nrow(uniq_pws94)
#68.93299%

# For Owner Type People Served
100*sum(lg$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#85.50818%

100*sum(p$Pop_Violated)/sum(uniq_pws94$Pop_Violated)
#12.99097%




```


# Percent of violations from 2 categories
```{r % violations from 2 categories}
levels(factor(uniq_pws94$PWS.Type))

# For stacted bar plots (Figure S9)
# for GW vs. SW figure filled by PWS Type
gw_tncws = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater" & uniq_pws94$PWS.Type == "Transient non-community system" ,]
100*nrow(gw_tncws)/nrow(uniq_pws94)
#47.64151%

gw_cws = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater" & uniq_pws94$PWS.Type == "Community water system" ,]
100*nrow(gw_cws)/nrow(uniq_pws94)
#33.88907%

gw_ntncws = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater" & uniq_pws94$PWS.Type == "Non-Transient non-community system" ,]
100*nrow(gw_ntncws)/nrow(uniq_pws94)
#13.91509%

# for PWS.Type Figure Filled by Owner Type
cws_lg = uniq_pws94[uniq_pws94$Owner.Type == "Local government" & uniq_pws94$PWS.Type == "Community water system" ,]
100*nrow(cws_lg)/nrow(uniq_pws94)
#20.83604%

cws_p = uniq_pws94[uniq_pws94$Owner.Type == "Private" & uniq_pws94$PWS.Type == "Community water system" ,]
100*nrow(cws_p)/nrow(uniq_pws94)
# 16.03774

ntncws_p = uniq_pws94[uniq_pws94$Owner.Type == "Private" & uniq_pws94$PWS.Type == "Non-Transient non-community system" ,]
100*nrow(ntncws_p)/nrow(uniq_pws94)
#10.30416

tncws_p = uniq_pws94[uniq_pws94$Owner.Type == "Private" & uniq_pws94$PWS.Type == "Transient non-community system" ,]
100*nrow(tncws_p)/nrow(uniq_pws94)
#42.59109

# for Owner Type Figure Filled by GW vs. SW
lg_gw = uniq_pws94[uniq_pws94$Owner.Type == "Local government" & 
                       uniq_pws94$GW.or.SW == "Groundwater" ,]
100*nrow(lg_gw)/nrow(uniq_pws94)
#21.96649

lg_sw = uniq_pws94[uniq_pws94$Owner.Type == "Local government" & 
                       uniq_pws94$GW.or.SW == "Surface water" ,]
100*nrow(lg_sw)/nrow(uniq_pws94)
# 3.139232

p_gw = uniq_pws94[uniq_pws94$Owner.Type == "Private" & 
                       uniq_pws94$GW.or.SW == "Groundwater" ,]
100*nrow(p_gw)/nrow(uniq_pws94)
#67.52602

fg_gw = uniq_pws94[uniq_pws94$Owner.Type == "Federal government" & 
                       uniq_pws94$GW.or.SW == "Groundwater" ,]
100*nrow(fg_gw)/nrow(uniq_pws94)
#0.4554327

pp_gw = uniq_pws94[uniq_pws94$Owner.Type == "Public/Private" & 
                       uniq_pws94$GW.or.SW == "Groundwater" ,]
100*nrow(pp_gw)/nrow(uniq_pws94)
#3.692258

sg_gw = uniq_pws94[uniq_pws94$Owner.Type == "State government" & 
                       uniq_pws94$GW.or.SW == "Groundwater" ,]
100*nrow(sg_gw)/nrow(uniq_pws94)
#1.634678

# for Owner Type Figure Filled by Facility Type
lg_well = uniq_pws94[uniq_pws94$Owner.Type == "Local government" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Well" ,]
100*nrow(lg_well)/nrow(uniq_pws94)


lg_treat = uniq_pws94[uniq_pws94$Owner.Type == "Local government" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Treatment Plant" ,]
100*nrow(lg_treat)/nrow(uniq_pws94)

p_well = uniq_pws94[uniq_pws94$Owner.Type == "Private" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Well" ,]
100*nrow(p_well)/nrow(uniq_pws94)

p_treat = uniq_pws94[uniq_pws94$Owner.Type == "Private" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Treatment Plant" ,]
100*nrow(p_treat)/nrow(uniq_pws94)

p_dist = uniq_pws94[uniq_pws94$Owner.Type == "Private" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Distribution System/Zone" ,]
100*nrow(p_dist)/nrow(uniq_pws94)

# Facility Type

tncws_dist = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Distribution System/Zone" ,]
100*nrow(tncws_dist)/nrow(uniq_pws94)

tncws_treat = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Treatment Plant" ,]
100*nrow(tncws_treat)/nrow(uniq_pws94)

ntncws_treat = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Treatment Plant" ,]
100*nrow(ntncws_treat)/nrow(uniq_pws94)

cws_treat = uniq_pws94[uniq_pws94$PWS.Type == "Community water system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Treatment Plant" ,]
100*nrow(cws_treat)/nrow(uniq_pws94)

tncws_well = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Well" ,]
100*nrow(tncws_well)/nrow(uniq_pws94)

ntncws_well = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Well" ,]
100*nrow(ntncws_well)/nrow(uniq_pws94)

cws_well = uniq_pws94[uniq_pws94$PWS.Type == "Community water system" & 
                       uniq_pws94$FACILITY_TYPE_DESCRIPTION == "Well" ,]
100*nrow(cws_well)/nrow(uniq_pws94)


```

# System Size vs Violations
```{r System Size vs Violations}


#SDWIS94 <- SDWIS[SDWIS$YEAR >= 1994 & SDWIS$YEAR <= 2016,]
uniq_pws94_2 = SDWIS94[,c("PWSID","YEAR","Population.Served.Count.Vio","EPA.Region","Primacy.Agency","PWS.Type","GW.or.SW","Owner.Type","Service.Connections.Count")]
names(uniq_pws94_2)[3] = "Pop_Violated"
uniq_pws94_2 = unique(uniq_pws94_2) 

# for unique violations per year (1 per year per PWS)
# gw = uniq_pws94_2[uniq_pws94_2$GW.or.SW == "Groundwater",]
# sw = uniq_pws94_2[uniq_pws94_2$GW.or.SW == "Surface water",]

# for all violations
gw = SDWIS94[SDWIS94$GW.or.SW == "Groundwater",]
sw = SDWIS94[SDWIS94$GW.or.SW == "Surface water",]
names(gw)[which(colnames(gw)=="Population.Served.Count.Vio")] = "Pop_Violated"
names(sw)[which(colnames(sw)=="Population.Served.Count.Vio")] = "Pop_Violated"

# summarize each PWSID by number of violations, Pop Served and Service Connections
library(dplyr)

# find frequency of violations for each PWSID
gw_table = as.data.frame(table(gw$PWSID))
names(gw_table) = c("PWSID","Freq_Viol")
gw_table2 = gw_table[gw_table$Freq_Viol >0,]

sw_table = as.data.frame(table(sw$PWSID))
names(sw_table) = c("PWSID","Freq_Viol")
sw_table2 = gw_table[sw_table$Freq_Viol >0,]


# find the pop served and number of service connections per PWSID 
library(dplyr)
gw_size <- gw %>% group_by(PWSID) %>% summarize(Pop_Served = sum(Pop_Violated), Connections=mean(Service.Connections.Count))

sw_size <- sw %>% group_by(PWSID) %>% summarize(Pop_Served = sum(Pop_Violated), Connections=mean(Service.Connections.Count))

# merge
gw_size2 = merge(gw_table,gw_size,by="PWSID")
sw_size2 = merge(sw_table,sw_size,by="PWSID")

# Merge on Duration
# Avg Duration
gw_size3 = merge(gw_size2,PWS_Dur_AvgQuar,by="PWSID",all.x=T)
sw_size3 = merge(sw_size2,PWS_Dur_AvgQuar,by="PWSID",all.x=T)

# max Duration

gw_size4 = merge(gw_size3,PWS_Dur_MaxQuar,by="PWSID",all.x=T)
sw_size4 = merge(sw_size3,PWS_Dur_MaxQuar,by="PWSID",all.x=T)



#######################################################################
## PLOTS ##
#######################################################################
# Plot GW for Population Served

par(mfrow=c(2,2))
p1 = plot(gw_size2$Freq_Viol ~ gw_size2$Pop_Served,
     xlab="Population Served", ylab="Number of Violations", 
     main="Groundwater Systems")

p2 = plot(gw_size2$Freq_Viol ~ (gw_size2$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Number of Violations", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size2$Freq_Viol ~ sw_size2$Pop_Served,
     xlab="Population Served", ylab="Number of Violations", 
     main="Surface Water Systems")

p4 = plot(sw_size2$Freq_Viol ~ (sw_size2$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Number of Violations", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots


# Plots for Service Connections
par(mfrow=c(2,2))
# plot for GW
p1 = plot(gw_size2$Freq_Viol ~ gw_size2$Connections,
     xlab="Service Connections", ylab="Number of Violations", 
     main="Groundwater Systems")

p2 = plot(gw_size2$Freq_Viol ~ (gw_size2$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Number of Violations", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size2$Freq_Viol ~ sw_size2$Connections,
     xlab="Service Connections", ylab="Number of Violations", 
     main="Surface Water Systems")

p4 = plot(sw_size2$Freq_Viol ~ (sw_size2$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Number of Violations", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots

#*********************************************************************
# plots for Avg Duration 
# Pop Served
par(mfrow=c(2,2))
p1 = plot(gw_size4$mean_durY ~ gw_size4$Pop_Served,
     xlab="Population Served", ylab="Mean Years in Violation", 
     main="Groundwater Systems")

p2 = plot(gw_size4$mean_durY ~ (gw_size4$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Mean Years in Violation", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size4$mean_durY ~ sw_size4$Pop_Served,
     xlab="Population Served", ylab="Mean Years in Violation", 
     main="Surface Water Systems")

p4 = plot(sw_size4$mean_durY ~ (sw_size4$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Mean Years in Violation", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots

# Service Connections
par(mfrow=c(2,2))
p1 = plot(gw_size4$mean_durY ~ gw_size4$Connections,
     xlab="Service Connections", ylab="Mean Years in Violation", 
     main="Groundwater Systems")

p2 = plot(gw_size4$mean_durY ~ (gw_size4$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Mean Years in Violation", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size4$mean_durY ~ sw_size4$Connections,
     xlab="Service Connections", ylab="Mean Years in Violation", 
     main="Surface Water Systems")

p4 = plot(sw_size4$mean_durY ~ (sw_size4$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Mean Years in Violation", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots


# Max Duration

# Pop Served
par(mfrow=c(2,2))
p1 = plot(gw_size4$max_durY ~ gw_size4$Pop_Served,
     xlab="Population Served", ylab="Max Years in Violation", 
     main="Groundwater Systems")

p2 = plot(gw_size4$max_durY ~ (gw_size4$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Max Years in Violation", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size4$max_durY ~ sw_size4$Pop_Served,
     xlab="Population Served", ylab="Max Years in Violation", 
     main="Surface Water Systems")

p4 = plot(sw_size4$max_durY ~ (sw_size4$Pop_Served),log="x",
     xlab="Log Scale of Population Served", ylab="Max Years in Violation", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots

# Service Connections
par(mfrow=c(2,2))
p1 = plot(gw_size4$max_durY ~ gw_size4$Connections,
     xlab="Service Connections", ylab="Max Years in Violation", 
     main="Groundwater Systems")

p2 = plot(gw_size4$max_durY ~ (gw_size4$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Max Years in Violation", 
     main="Groundwater Systems")

# Plot SW
p3 = plot(sw_size4$max_durY ~ sw_size4$Connections,
     xlab="Service Connections", ylab="Max Years in Violation", 
     main="Surface Water Systems")

p4 = plot(sw_size4$max_durY ~ (sw_size4$Connections),log="x",
     xlab="Log Scale of Service Connections", ylab="Max Years in Violation", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# FINAL PLOTS

plot(gw_size2$Freq_Viol ~ (gw_size2$Pop_Served),
     xlab="Population Served per PWS", ylab="Number of Violations", 
     main="Groundwater Systems")
abline(gw_size2$Freq_Viol ~ gw_size2$Pop_Served)

# GW & SW Pop served vs. number of violations
par(mfrow=c(2,2))
p1 = plot(gw_size2$Freq_Viol ~ gw_size2$Pop_Served,log="x",
     xlab="Population Served per PWS", ylab="Number of Violations", 
     main="Groundwater Systems")

p2 = plot(sw_size2$Freq_Viol ~ sw_size2$Pop_Served,log="x",
     xlab="Population Served per PWS", ylab="Number of Violations", 
     main="Surface Water Systems")

# GW & SW Pop served vs. Max years in of violations
p2 = plot(gw_size4$max_durY ~ gw_size4$Pop_Served,log="x",
     xlab="Population Served per PWS", ylab="Max Years in Violation", 
     main="Groundwater Systems")

p4 = plot(sw_size4$max_durY ~ sw_size4$Pop_Served,log="x",
     xlab="Population Served per PWS", ylab="Max Years in Violation", 
     main="Surface Water Systems")
par(mfrow=c(1,1)) # this undos the combining of plots

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# FINAL PLOTS - WITH LOWESS SMOOTH CURVE

plot(Freq_Viol ~ Pop_Served, log="x", data= gw_size2)
# fit a loess line
loess_fit <- loess(Freq_Viol ~ Pop_Served, log="x", data= gw_size2)
lines(gw_size2$Pop_Served, predict(loess_fit), col = "blue")

#*****************
# There are some PWSs with 0 for population served, whic is not being included
library(lattice)
p1= xyplot(gw_size2$Freq_Viol ~ gw_size2$Pop_Served, col='black',
       type=c("p", "smooth"), col.line = "red", lwd = 2,
       scales = list(x = list(log = 10)),
       xlab="Population Served per PWS", ylab="Number of Violations", 
      main="Groundwater Systems")

p2= xyplot(sw_size2$Freq_Viol ~ sw_size2$Pop_Served, col='black',
       type=c("p", "smooth"), col.line = "red", lwd = 2,
       scales = list(x = list(log = 10)),
       xlab="Population Served per PWS", ylab="Number of Violations", 
      main="Surface Water Systems")

p3= xyplot(gw_size4$max_durY ~ gw_size4$Pop_Served, col='black',
       type=c("p", "smooth"), col.line = "red", lwd = 2,
       scales = list(x = list(log = 10)),
       xlab="Population Served per PWS", ylab="Max Years in Violation", 
      main="Groundwater Systems")

p4= xyplot(sw_size4$max_durY ~ sw_size4$Pop_Served, col='black',
       type=c("p", "smooth"), col.line = "red", lwd = 2,
       scales = list(x = list(log = 10)),
       xlab="Population Served per PWS", ylab="Max Years in Violation", 
      main="Surface Water Systems")

grid.arrange(p1,p2,p3,p4,nrow=2,ncol=2)


# Figuring out location of 500 people served

# ggplot(data=gw_size2, aes(x=Pop_Served,y=Freq_Viol, group=1))+
#   geom_point() +
#   #scale_x_continuous(limits = c(0,10^3)) +
#   scale_x_log10(breaks=seq(0,10^3,by=500))
#   
# 
# ggplot(data=gw_size2, aes(x=Pop_Served,y=Freq_Viol, group=1))+
#   geom_point() +
#   #scale_x_continuous(limits = c(0,10^3)) +
#   scale_x_log10(breaks=seq(0,10^3,by=100))
#   
#   
# ggplot(data=gw_size2, aes(x=Pop_Served,y=Freq_Viol, group=1))+
#   geom_point() + 
#   scale_x_log10()

```


```{r Source Water Protection}


# For specific year
SDWISYY <- SDWIS[SDWIS$YEAR >= 2010 & SDWIS$YEAR <= 2010,]

swpYY = SDWISYY[,c("PWSID","YEAR","Population.Served.Count.Vio","EPA.Region","Primacy.Agency","PWS.Type","GW.or.SW","Owner.Type","Service.Connections.Count","Is.Source.Water.Protected")]
names(swpYY)[3] = "Pop_Violated"
#swp94b = unique(swp94) 


swpYY$SWP = ifelse(swpYY$Is.Source.Water.Protected == "Y",1,0)

# number of violations for each PWSID
library(dplyr)
swp_freq <- swpYY %>% group_by(PWSID) %>% summarize(Freq_Viol = n())

# create subset with just PWSID and "Is.Source.Water.Protected"
swp2 = swpYY[,c("PWSID","Is.Source.Water.Protected","SWP")]

# merge Is.Source.Water.Protected onto PWSID violation freq table
swp_freq2 = merge(swp_freq,swp2,by="PWSID",all.x=T)

# Get all unique rows
swp_freq3 = unique(swp_freq2)

# change "-" to "Unknown"
library(plyr)
swp_freq3$SWP2 = revalue(swp_freq3$Is.Source.Water.Protected, 
                  c("-"="Unknown"))
detach(package:plyr) 
levels(factor(swp_freq3$SWP2))

boxplot(swp_freq3$Freq_Viol~swp_freq3$SWP2,
        xlab= "Is Source water protected?",ylab="Number of Violations per System")

nrow(swp_freq3[swp_freq3$SWP2 == "Unknown",]) 
# 1695
nrow(swp_freq3[swp_freq3$SWP2 == "N",]) 
# 1489
nrow(swp_freq3[swp_freq3$SWP2 == "Y",]) 
# 263

mean(swp_freq3[swp_freq3$SWP2 == "Unknown",]$Freq_Viol) # 3.733923
median(swp_freq3[swp_freq3$SWP2 == "Unknown",]$Freq_Viol) # 1

mean(swp_freq3[swp_freq3$SWP2 == "N",]$Freq_Viol) # 6.441907
median(swp_freq3[swp_freq3$SWP2 == "N",]$Freq_Viol) # 2

mean(swp_freq3[swp_freq3$SWP2 == "Y",]$Freq_Viol) # 6.471483
median(swp_freq3[swp_freq3$SWP2 == "Y",]$Freq_Viol) # 2



```

# COUNTY vs. Poplulation
```{r}

cnty_viol = read.csv(paste0(m_dir,"Projects/SDWIS/SDWIS_Violations_County_1994-2016 updated.csv"))


cnty_pop = read.csv(paste0(m_dir,"Projects/SDWIS/SDWIS_Pop_Served_County_1994-2016 updated.csv"))

cnty_census_pop = read.csv(paste0(m_dir,"Projects/Data/Census_Population_County_FIPS.csv"))


cnty_pop_viol_census = merge(cnty_pop,cnty_census_pop,by="FIPS",all.x=T)

df = cnty_pop_viol_census

plot(Pop_Violated ~ pop2010,data=df,log='x')
abline(df$Pop_Violated ~ df$pop2010)

xyplot(df$Pop_Violated ~ df$pop2010,na.rm=T)
xyplot(df$Pop_Violated ~ df$pop2010, col='black',
       type=c("p", "smooth"), col.line = "red", lwd = 2,
       scales = list(x = list(log = 10)),
       xlab="Population Served per PWS", ylab="Number of Violations", 
      main="Groundwater Systems", na.rm=T)



```

# % Pop < 500
* % of violations with pop served < 500
```{r}

less500 = uniq_pws94[uniq_pws94$Pop_Violated < 500,]

nrow(uniq_pws94) # 12296 = total number of violations
nrow(less500) # 10408 = number of violations with pop < 500

# % of violations with pop served < 500
100*nrow(less500)/nrow(uniq_pws94)
# 84.64541 %


# % of unique SyStems in violation with pop served < 500
100*nrow(as.data.frame(unique(less500$PWSID)))/
                         nrow(as.data.frame(unique(uniq_pws94$PWSID)))
# 86.74212 % 

#**********************************
# LOOKING AT ALL VIOLATIONS (including multiple per quarter)
nrow(SDWIS94) # 23004
SDWIS94[1:20,"Population.Served.Count.Vio"]
SDWIS94[1:20,"Population.Served.Count"]
less500_all = SDWIS94[SDWIS94$Population.Served.Count.Vio < 500,]

# % of violations with pop served < 500
100*nrow(less500_all)/nrow(SDWIS94)
# 82.32916%

# % of unique SyStems in violation with pop served < 500
100*nrow(as.data.frame(unique(less500_all$PWSID)))/
                         nrow(as.data.frame(unique(SDWIS94$PWSID)))
# 86.75015


```



# CONCENTATION of VIOLATION
* Mean concentration reported for systems in violation
```{r Violation Measure}

conc = SDWIS[,c("PWSID","YEAR","Violation.Measure","Unit.Of.Measure.Code")]

conc94 = conc[conc$YEAR >=1994 & conc$YEAR <= 2016,]

# nrow(conc94[conc94$Unit.Of.Measure.Code == "MG/L",]) # 16690
# nrow(conc94[conc94$Unit.Of.Measure.Code == "MREM",]) # 4
# nrow(conc94[conc94$Unit.Of.Measure.Code == "PCI/L",]) # 3
# nrow(conc94[conc94$Unit.Of.Measure.Code == "UG/L",]) # 10
# nrow(conc94[conc94$Unit.Of.Measure.Code == "FTU",]) # 1
# nrow(conc94[conc94$Unit.Of.Measure.Code == "MREMY",]) # 3
# nrow(conc94[conc94$Unit.Of.Measure.Code == "-",]) # 6293

# Extract out only violations with concentration as MG/L
conc94 = conc94[conc94$Unit.Of.Measure.Code == "MG/L",]

#conc94$Violation.Measure = as.numeric(conc94$Violation.Measure)
conc94$Violation.Measure = as.numeric(as.character(conc94$Violation.Measure))
summary(conc94$Violation.Measure)

# remove concentrations >1000 mg/L
conc94 = conc94[conc94$Violation.Measure < 1000,]
summary(conc94$Violation.Measure)


# Find the mean concentration per system per year
library(dplyr)
conc94_mean = conc94 %>% group_by(PWSID,YEAR) %>% summarize(Violation.Conc = mean(Violation.Measure))
nrow(conc94_mean) #  8467
conc94_mean = as.data.frame(conc94_mean)

conc94_mean = na.omit(conc94_mean)

# Average Conc per year
conc94_byYear = conc94_mean %>% group_by(YEAR) %>% summarize(Violation.Conc = mean(Violation.Conc),
Violation.Conc.SE = (sd(Violation.Conc)/sqrt(n())))


ggplot(conc94_mean)+
  geom_bar(aes(x=factor(YEAR),y=Violation.Conc),
           stat="summary",fun.y="mean")+
  scale_fill_manual(values = mypal(colourCount))+
  #ggtitle("Average Violation Concentration")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="Mean Nitrate Concentration (mg/L)")+
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(legend.text=element_text(size=30))+
  #scale_y_continuous(expand=c(0,0))+
  theme(legend.position="top",legend.direction="vertical")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))#+ # add axis lines
  #scale_fill_grey()




```




# CONCENTRATION VIOLATION BY STATES
```{r}

# Merge States back on
conc94_state = merge(conc94_mean,uniq_pws94[,c('PWSID','Primacy.Agency')],by="PWSID",all.x=T)

conc94_state = unique(conc94_state)

# Mean Concentration per state table
library(dplyr)
conc94_state2 = conc94_state %>% group_by(Primacy.Agency) %>% summarize(Mean.Conc = mean(Violation.Conc),Max.Conc = max(Violation.Conc))

# Remove EPA regions & non conterminous states
conc94_state3 <- subset(conc94_state2, !Primacy.Agency%in%c("EPA Region 9")) 

# write.csv(conc94_state3, file = paste0(m_dir,"Projects/SDWIS/state_violation_concentrations1994-2016.csv"), row.names=F)


```


# MCL by State
```{r}
# Check different types of State.MCL
levels(factor(SDWIS94$State.MCL))

nrow(SDWIS94) # 23004
nrow(SDWIS94[SDWIS94$State.MCL == "-",]) # 8428
nrow(SDWIS94[SDWIS94$State.MCL == "0",]) # 1431
nrow(SDWIS94[SDWIS94$State.MCL == "0.0000001",]) # 3
nrow(SDWIS94[SDWIS94$State.MCL == "1",]) # 3
nrow(SDWIS94[SDWIS94$State.MCL == "1.4",]) # 2
nrow(SDWIS94[SDWIS94$State.MCL == "10",]) # 9492
nrow(SDWIS94[SDWIS94$State.MCL == "10.4",]) # 527
nrow(SDWIS94[SDWIS94$State.MCL == "10.49",]) #  144
nrow(SDWIS94[SDWIS94$State.MCL == "10.5",]) # 416
nrow(SDWIS94[SDWIS94$State.MCL == "11",]) # 1
nrow(SDWIS94[SDWIS94$State.MCL == "2.4",]) # 1
nrow(SDWIS94[SDWIS94$State.MCL == "2.5",]) # 2
nrow(SDWIS94[SDWIS94$State.MCL == "20",]) # 11
nrow(SDWIS94[SDWIS94$State.MCL == "20.5",]) # 66
nrow(SDWIS94[SDWIS94$State.MCL == "45",]) # 2442
nrow(SDWIS94[SDWIS94$State.MCL == "5",]) # 5
nrow(SDWIS94[SDWIS94$State.MCL == "5.4",]) # 12
nrow(SDWIS94[SDWIS94$State.MCL == "10.4999",]) #  17
nrow(SDWIS94[SDWIS94$State.MCL == "12",]) # 1


MCL20 = SDWIS94[SDWIS94$State.MCL == "20" |
                SDWIS94$State.MCL == "20.5",]
levels(factor(MCL20$PWS.Type))
# "Non-Transient non-community system" "Transient non-community system"
levels(factor(MCL20$Primacy.Agency))
# "Arizona"   "Illinois"  "Maryland"  "New York"  "Wisconsin" "Wyoming" 



```



# Monitoring/Reporting Violations by State
* When a system failed to report whethor or not there was a violation. 
```{r Monitoring Violations}

# Import Data
m1 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_cws.csv"))
m2 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_np.csv"))
m3 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_ntncws.csv"))
m4 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_tncws_gw_A.csv"))
m5 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_tncws_gw_I.csv"))
m6 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_tncws_gw_N.csv"))
m7 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_3_tncws_sw.csv"))
m8 = read.csv(paste0(m_dir,"Projects/SDWIS/Reporting_Violations/Monitoring_Violations_4.csv"))

names(m6)[1] = "PWS.ID"
# Subset out data
n1 = m1[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n2 = m2[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n3 = m3[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n4 = m4[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n5 = m5[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n6 = m6[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n7 = m7[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]
n8 = m8[,c("PWS.ID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count")]

# Merg Data
monitoring = rbind(n1,n2,n3,n4,n5,n6,n7,n8)
names(monitoring)[1] = "PWSID"

#************ Export Raw Data
monitoring_all = rbind(m1,m2,m3,m4,m5,m6,m7,m8)
names(monitoring_all)[1] = "PWSID"
# write.csv(monitoring_all, file = paste0(m_dir,"Projects/SDWIS/Reporting_Violations/All_Monitoring_Reporting_Violations.csv"), row.names=F)

# saveRDS(monitoring_all, paste0(m_dir,"Projects/SDWIS/Reporting_Violations/All_Monitoring_Reporting_Violations.rds"))

# Creating date column in the correct format
monitoring$DATE = as.Date(monitoring$Compliance.Period.Begin.Date, format = "%d-%B-%y")

#Add YEAR column
library(lubridate) 
monitoring$YEAR = year(monitoring$DATE)

# Get unique violations per year
MR94 <- monitoring[monitoring$YEAR >= 1994 & monitoring$YEAR <= 2016,] 
summary(MR94$YEAR)

MR94 = MR94[,c("PWSID","Primacy.Agency","Violation.Category.Code","Compliance.Period.Begin.Date","Population.Served.Count","YEAR")]
colnames(MR94)

MR94_uniq = unique(MR94)




# Test if get same number of rows
test = MR94[,c("PWSID","YEAR")]
test_uniq = unique(test)

nrow(test_uniq) # 176104
nrow(MR94_uniq) # 187016

library(ggplot2)
ggplot(data=MR94_uniq, aes(MR94_uniq$YEAR)) + 
  geom_histogram(binwidth = 1, col = "black")+
  ggtitle( "Number of Nitrate Monitoring/Reporting Violations")+
  theme(plot.title = element_text(hjust = 0.5))+ # puts title in center
  labs(x="",y="Number of Systems with Monitoring/Reporting Violations")+
  scale_y_continuous(breaks= seq(0, 14000, by = 2000),expand = c(0, 0))+
  scale_x_continuous(breaks= seq(1994, 2016, by = 2))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=30))+
  theme(plot.title=element_text(size=30))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black")) # add axis lines

#####################################################
# % of systems with MR violations
# creates table with freq for each row corresponding to each year. 
MR94_table = as.data.frame(table(MR94_uniq$YEAR)) 
names(MR94_table) <-  c("YEAR","Freq.MR")


# % in violations using the inventory based on # systems active for at least part of year
MR94_table = merge(MR94_table, invent_gwsw, by="YEAR")

# Calculating percent in PWS in violation
MR94_table$Perc.MR = 100*MR94_table$Freq.MR / MR94_table$Total_Syst

MR94_table = MR94_table[,c("YEAR","Freq.MR","Perc.MR")]

ggplot(data=MR94_table, aes(x=YEAR,y=Perc.MR, width=1)) + 
  geom_bar(stat="identity",col="black")+ # stat="identity" used when don't need a count for histogram
  ggtitle( "Percent of Systems with MR Violation")+
  labs(x="",y="% of Systems with MR Violation")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(legend.title=element_blank())+
      theme(axis.title=element_text(size=20))+
      theme(axis.text=element_text(size=30))+
      theme(plot.title=element_text(size=30,hjust=0.5))


# State % Monitoring Violations

# creates table with freq for each row corresponding to each year. 
MR94_state = as.data.frame(table(MR94_uniq$Primacy.Agency)) 
names(MR94_state) <-  c("Primacy.Agency","Freq.MR")

# remove alaska, HI, etc. 
MR94_state <- subset(MR94_state, !Primacy.Agency%in%c("Alaska","Hawaii","Puerto Rico","US Virgin Islands","Guam","American Samoa","Northern Mariana Islands","Navajo Nation","District of Columbia","EPA Region 1","EPA Region 2","EPA Region 4","EPA Region 5","EPA Region 6","EPA Region 7","EPA Region 8","EPA Region 9","EPA Region 10")) 

# write.csv(MR94_state, file = paste0(m_dir,"Projects/SDWIS/State_Monitoring_Reporting_Violations.csv"), row.names=F)

#################################################
# % MR Violations Per state

# Merge the inventory of # systems per state with Violation Freq per state 
library(dplyr)
state_inventory_sum = state_inventory %>% dplyr::group_by(STATE) %>% summarize(Sum_Inventory = sum(Tot_Systems))


MR94_state = merge(MR94_state,state_inventory_sum,by.x="Primacy.Agency",by.y="STATE",all.y=T)

# Add on % MR Violations
MR94_state$perc_MR_viol = 100*MR94_state$Freq.MR/MR94_state$Sum_Inventory

# write.csv(MR94_state, file = paste0(m_dir,"Projects/SDWIS/State_Monitoring_Reporting_Percent_Violations.csv"), row.names=F)

#################################################
# Mean Annual MR Violations per State
library(dplyr)
MR_state_yr = 
  MR94_uniq %>% 
  dplyr::group_by(Primacy.Agency,YEAR) %>% 
  summarize(MR_viol = n())

MR_state_mean = 
  MR_state_yr %>% 
  dplyr::group_by(Primacy.Agency) %>% 
  summarize(mean_MR_viol = mean(MR_viol))

# remove alaska, HI, etc. 
MR_state_mean <- subset(MR_state_mean, !Primacy.Agency%in%c("Alaska","Hawaii","Puerto Rico","US Virgin Islands","Guam","American Samoa","Northern Mariana Islands","Navajo Nation","District of Columbia","EPA Region 1","EPA Region 2","EPA Region 4","EPA Region 5","EPA Region 6","EPA Region 7","EPA Region 8","EPA Region 9","EPA Region 10")) 

# write.csv(MR_state_mean, file = paste0(m_dir,"Projects/SDWIS/Mean_MR_Violations_State_94-2016_updated.csv"), row.names=F)

# % Mean Annual MR Violations per State
library(dplyr)
state_inventory_mean = 
  state_inventory %>% 
  dplyr::group_by(STATE) %>% 
  summarize(mean_inventory = mean(Tot_Systems))

# Calc the Percent
# First merge mean violations and inventory
MR_state_perc = 
  merge(MR_state_mean,
        state_inventory_mean,
        by.x="Primacy.Agency",by.y="STATE",all.x=T)

MR_state_perc$Perc_MR = 100*MR_state_perc$mean_MR_viol/MR_state_perc$mean_inventory

# write.csv(MR_state_perc, file = paste0(m_dir,"Projects/SDWIS/Mean_Perc_MR_Violations_State_94-2016_updated.csv"), row.names=F)


```

# STATE TIME TRENDS
* Gets temporal trends in violations for each U.S. State
```{r}

#View(uniq_pws94)

library(dplyr)
az = uniq_pws94[uniq_pws94$Primacy.Agency == "Arizona",]
az2 <- az %>% dplyr::group_by(YEAR) %>% summarize(Viol.Freq = n())
az2$State = "Arizona"
az3 = merge(az2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
az4 = unique(az3)
az4$Perc.Viol = 100*az4$Viol.Freq/az4$Tot_Systems

ar = uniq_pws94[uniq_pws94$Primacy.Agency == "Arkansas",]
ar2 <- ar %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ar2$State = "Arkansas"
ar3 = merge(ar2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ar4 = unique(ar3)
ar4$Perc.Viol = 100*ar4$Viol.Freq/ar4$Tot_Systems

ca = uniq_pws94[uniq_pws94$Primacy.Agency == "California",]
ca2 <- ca %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ca2$State = "California"
ca3 = merge(ca2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ca4 = unique(ca3)
ca4$Perc.Viol = 100*ca4$Viol.Freq/ca4$Tot_Systems

co = uniq_pws94[uniq_pws94$Primacy.Agency == "Colorado",]
co2 <- co %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
co2$State = "Colorado"
co3 = merge(co2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
co4 = unique(co3)
co4$Perc.Viol = 100*co4$Viol.Freq/co4$Tot_Systems

ct = uniq_pws94[uniq_pws94$Primacy.Agency == "Connecticut",]
ct2 <- ct %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ct2$State = "Connecticut"
ct3 = merge(ct2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ct4 = unique(ct3)
ct4$Perc.Viol = 100*ct4$Viol.Freq/ct4$Tot_Systems

de = uniq_pws94[uniq_pws94$Primacy.Agency == "Delaware",]
de2 <- de %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
de2$State = "Delaware"
de3 = merge(de2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
de4 = unique(de3)
de4$Perc.Viol = 100*de4$Viol.Freq/de4$Tot_Systems

fl = uniq_pws94[uniq_pws94$Primacy.Agency == "Florida",]
fl2 <- fl %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
fl2$State = "Florida"
fl3 = merge(fl2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
fl4 = unique(fl3)
fl4$Perc.Viol = 100*fl4$Viol.Freq/fl4$Tot_Systems

ga = uniq_pws94[uniq_pws94$Primacy.Agency == "Georgia",]
ga2 <- ga %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ga2$State = "Georgia"
ga3 = merge(ga2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ga4 = unique(ga3)
ga4$Perc.Viol = 100*ga4$Viol.Freq/ga4$Tot_Systems

il = uniq_pws94[uniq_pws94$Primacy.Agency == "Illinois",]
il2 <- il %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
il2$State = "Illinois"
il3 = merge(il2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
il4 = unique(il3)
il4$Perc.Viol = 100*il4$Viol.Freq/il4$Tot_Systems

id = uniq_pws94[uniq_pws94$Primacy.Agency == "Idaho",]
id2 <- id %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
id2$State = "Idaho"
id3 = merge(id2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
id4 = unique(id3)
id4$Perc.Viol = 100*id4$Viol.Freq/id4$Tot_Systems

IN = uniq_pws94[uniq_pws94$Primacy.Agency == "Indiana",]
IN2 <- IN %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
IN2$State = "Indiana"
IN3 = merge(IN2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
IN4 = unique(IN3)
IN4$Perc.Viol = 100*IN4$Viol.Freq/IN4$Tot_Systems

ia = uniq_pws94[uniq_pws94$Primacy.Agency == "Iowa",]
ia2 <- ia %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ia2$State = "Iowa"
ia3 = merge(ia2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ia4 = unique(ia3)
ia4$Perc.Viol = 100*ia4$Viol.Freq/ia4$Tot_Systems

ks = uniq_pws94[uniq_pws94$Primacy.Agency == "Kansas",]
ks2 <- ks %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ks2$State = "Kansas"
ks3 = merge(ks2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ks4 = unique(ks3)
ks4$Perc.Viol = 100*ks4$Viol.Freq/ks4$Tot_Systems

ky = uniq_pws94[uniq_pws94$Primacy.Agency == "Kentucky",]
ky2 <- ky %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ky2$State = "Kentucky"
ky3 = merge(ky2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ky4 = unique(ky3)
ky4$Perc.Viol = 100*ky4$Viol.Freq/ky4$Tot_Systems

me = uniq_pws94[uniq_pws94$Primacy.Agency == "Maine",]
me2 <- me %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
me2$State = "Maine"
me3 = merge(me2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
me4 = unique(me3)
me4$Perc.Viol = 100*me4$Viol.Freq/me4$Tot_Systems

md = uniq_pws94[uniq_pws94$Primacy.Agency == "Maryland",]
md2 <- md %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
md2$State = "Maryland"
md3 = merge(md2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
md4 = unique(md3)
md4$Perc.Viol = 100*md4$Viol.Freq/md4$Tot_Systems

ma = uniq_pws94[uniq_pws94$Primacy.Agency == "Massachusetts",]
ma2 <- ma %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ma2$State = "Massachusetts"
ma3 = merge(ma2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ma4 = unique(ma3)
ma4$Perc.Viol = 100*ma4$Viol.Freq/ma4$Tot_Systems

mi = uniq_pws94[uniq_pws94$Primacy.Agency == "Michigan",]
mi2 <- mi %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
mi2$State = "Michigan"
mi3 = merge(mi2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
mi4 = unique(mi3)
mi4$Perc.Viol = 100*mi4$Viol.Freq/mi4$Tot_Systems

mn = uniq_pws94[uniq_pws94$Primacy.Agency == "Minnesota",]
mn2 <- mn %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
mn2$State = "Minnesota"
mn3 = merge(mn2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
mn4 = unique(mn3)
mn4$Perc.Viol = 100*mn4$Viol.Freq/mn4$Tot_Systems

mo = uniq_pws94[uniq_pws94$Primacy.Agency == "Missouri",]
mo2 <- mo %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
mo2$State = "Missouri"
mo3 = merge(mo2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
mo4 = unique(mo3)
mo4$Perc.Viol = 100*mo4$Viol.Freq/mo4$Tot_Systems

mt = uniq_pws94[uniq_pws94$Primacy.Agency == "Montana",]
mt2 <- mt %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
mt2$State = "Montana"
mt3 = merge(mt2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
mt4 = unique(mt3)
mt4$Perc.Viol = 100*mt4$Viol.Freq/mt4$Tot_Systems

ne = uniq_pws94[uniq_pws94$Primacy.Agency == "Nebraska",]
ne2 <- ne %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ne2$State = "Nebraska"
ne3 = merge(ne2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ne4 = unique(ne3)
ne4$Perc.Viol = 100*ne4$Viol.Freq/ne4$Tot_Systems

nv = uniq_pws94[uniq_pws94$Primacy.Agency == "Nevada",]
nv2 <- nv %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nv2$State = "Nevada"
nv3 = merge(nv2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nv4 = unique(nv3)
nv4$Perc.Viol = 100*nv4$Viol.Freq/nv4$Tot_Systems

nh = uniq_pws94[uniq_pws94$Primacy.Agency == "New Hampshire",]
nh2 <- nh %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nh2$State = "New Hampshire"
nh3 = merge(nh2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nh4 = unique(nh3)
nh4$Perc.Viol = 100*nh4$Viol.Freq/nh4$Tot_Systems

nj = uniq_pws94[uniq_pws94$Primacy.Agency == "New Jersey",]
nj2 <- nj %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nj2$State = "New Jersey"
nj3 = merge(nj2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nj4 = unique(nj3)
nj4$Perc.Viol = 100*nj4$Viol.Freq/nj4$Tot_Systems

nm = uniq_pws94[uniq_pws94$Primacy.Agency == "New Mexico",]
nm2 <- nm %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nm2$State = "New Mexico"
nm3 = merge(nm2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nm4 = unique(nm3)
nm4$Perc.Viol = 100*nm4$Viol.Freq/nm4$Tot_Systems

ny = uniq_pws94[uniq_pws94$Primacy.Agency == "New York",]
ny2 <- ny %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ny2$State = "New York"
ny3 = merge(ny2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ny4 = unique(ny3)
ny4$Perc.Viol = 100*ny4$Viol.Freq/ny4$Tot_Systems

nc = uniq_pws94[uniq_pws94$Primacy.Agency == "North Carolina",]
nc2 <- nc %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nc2$State = "North Carolina"
nc3 = merge(nc2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nc4 = unique(nc3)
nc4$Perc.Viol = 100*nc4$Viol.Freq/nc4$Tot_Systems

nd = uniq_pws94[uniq_pws94$Primacy.Agency == "North Dakota",]
nd2 <- nd %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
nd2$State = "North Dakota"
nd3 = merge(nd2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
nd4 = unique(nd3)
nd4$Perc.Viol = 100*nd4$Viol.Freq/nd4$Tot_Systems

oh = uniq_pws94[uniq_pws94$Primacy.Agency == "Ohio",]
oh2 <- oh %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
oh2$State = "Ohio"
oh3 = merge(oh2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
oh4 = unique(oh3)
oh4$Perc.Viol = 100*oh4$Viol.Freq/oh4$Tot_Systems

ok = uniq_pws94[uniq_pws94$Primacy.Agency == "Oklahoma",]
ok2 <- ok %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ok2$State = "Oklahoma"
ok3 = merge(ok2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ok4 = unique(ok3)
ok4$Perc.Viol = 100*ok4$Viol.Freq/ok4$Tot_Systems

or = uniq_pws94[uniq_pws94$Primacy.Agency == "Oregon",]
or2 <- or %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
or2$State = "Oregon"
or3 = merge(or2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
or4 = unique(or3)
or4$Perc.Viol = 100*or4$Viol.Freq/or4$Tot_Systems

pa = uniq_pws94[uniq_pws94$Primacy.Agency == "Pennsylvania",]
pa2 <- pa %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
pa2$State = "Pennsylvania"
pa3 = merge(pa2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
pa4 = unique(pa3)
pa4$Perc.Viol = 100*pa4$Viol.Freq/pa4$Tot_Systems

ri = uniq_pws94[uniq_pws94$Primacy.Agency == "Rhode Island",]
ri2 <- ri %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ri2$State = "Rhode Island"
ri3 = merge(ri2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ri4 = unique(ri3)
ri4$Perc.Viol = 100*ri4$Viol.Freq/ri4$Tot_Systems

sc = uniq_pws94[uniq_pws94$Primacy.Agency == "South Carolina",]
sc2 <- sc %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
sc2$State = "South Carolina"
sc3 = merge(sc2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
sc4 = unique(sc3)
sc4$Perc.Viol = 100*sc4$Viol.Freq/sc4$Tot_Systems

sd = uniq_pws94[uniq_pws94$Primacy.Agency == "South Dakota",]
sd2 <- sd %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
sd2$State = "South Dakota"
sd3 = merge(sd2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
sd4 = unique(sd3)
sd4$Perc.Viol = 100*sd4$Viol.Freq/sd4$Tot_Systems

tn = uniq_pws94[uniq_pws94$Primacy.Agency == "Tennessee",]
tn2 <- tn %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
tn2$State = "Tennessee"
tn3 = merge(tn2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
tn4 = unique(tn3)
tn4$Perc.Viol = 100*tn4$Viol.Freq/tn4$Tot_Systems

tx = uniq_pws94[uniq_pws94$Primacy.Agency == "Texas",]
tx2 <- tx %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
tx2$State = "Texas"
tx3 = merge(tx2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
tx4 = unique(tx3)
tx4$Perc.Viol = 100*tx4$Viol.Freq/tx4$Tot_Systems

ut = uniq_pws94[uniq_pws94$Primacy.Agency == "Utah",]
ut2 <- ut %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
ut2$State = "Utah"
ut3 = merge(ut2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
ut4 = unique(ut3)
ut4$Perc.Viol = 100*ut4$Viol.Freq/ut4$Tot_Systems

vt = uniq_pws94[uniq_pws94$Primacy.Agency == "Vermont",]
vt2 <- vt %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
vt2$State = "Vermont"
vt3 = merge(vt2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
vt4 = unique(vt3)
vt4$Perc.Viol = 100*vt4$Viol.Freq/vt4$Tot_Systems

va = uniq_pws94[uniq_pws94$Primacy.Agency == "Virginia",]
va2 <- va %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
va2$State = "Virginia"
va3 = merge(va2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
va4 = unique(va3)
va4$Perc.Viol = 100*va4$Viol.Freq/va4$Tot_Systems

wa = uniq_pws94[uniq_pws94$Primacy.Agency == "Washington",]
wa2 <- wa %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
wa2$State = "Washington"
wa3 = merge(wa2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
wa4 = unique(wa3)
wa4$Perc.Viol = 100*wa4$Viol.Freq/wa4$Tot_Systems

wv = uniq_pws94[uniq_pws94$Primacy.Agency == "West Virginia",]
wv2 <- wv %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
wv2$State = "West Virginia"
wv3 = merge(wv2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
wv4 = unique(wv3)
wv4$Perc.Viol = 100*wv4$Viol.Freq/wv4$Tot_Systems

wi = uniq_pws94[uniq_pws94$Primacy.Agency == "Wisconsin",]
wi2 <- wi %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
wi2$State = "Wisconsin"
wi3 = merge(wi2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
wi4 = unique(wi3)
wi4$Perc.Viol = 100*wi4$Viol.Freq/wi4$Tot_Systems

wy = uniq_pws94[uniq_pws94$Primacy.Agency == "Wyoming",]
wy2 <- wy %>% group_by(YEAR) %>% summarize(Viol.Freq = n())
wy2$State = "Wyoming"
wy3 = merge(wy2,state_inventory[,c("YEAR","STATE","Tot_Systems")],by.x=c("YEAR","State"),by.y=c("YEAR","STATE"),all.x=T)
wy4 = unique(wy3)
wy4$Perc.Viol = 100*wy4$Viol.Freq/wy4$Tot_Systems

plot(Perc.Viol~as.numeric(YEAR), data=ar4)

# Merge all State data together

trends = rbind(tx4,ca4,pa4,wi4,ks4,ok4,ar4) # wa4, il4, ne4


ggplot(trends,aes(x=factor(YEAR),y=Perc.Viol,group=State,colour=State))+
  geom_line(size=1)+
  scale_fill_manual(values = mypal(colourCount))+
  ggtitle( "Violations by State")+
  theme(plot.title = element_text(hjust = 0.5))+#puts title in center
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  labs(x=" ",y="% of Systems in Violations")+
  guides(fill = guide_legend(title="", reverse=F))+    
  theme(plot.title=element_text(size=35))+
  theme(axis.title=element_text(size=30))+
  theme(axis.text=element_text(size=30))+
  theme(legend.text=element_text(size=30))+
  guides(fill = guide_legend(ncol=2,title="",
        reverse=FALSE,keyheight=2,keywidth = 1.5))+
  scale_y_continuous(expand=c(0,0))+
  theme(legend.title=element_blank())+
  # theme(legend.position="top",legend.direction="vertical",
  #       legend.box="horizontal",legend.title=element_blank())+
  #labs(fill="")+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line = element_line(colour = "black"))#+ # add axis lines
  #scale_fill_grey()

  
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 
# # Increasing
# p1=plot(tx4$Perc.Viol~tx4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# p2=plot(ca4$Perc.Viol~ca4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# # Decreasubg
# p3=plot(pa4$Perc.Viol~pa4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# p5=plot(wi4$Perc.Viol~wi4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# p8=plot(ks4$Perc.Viol~ks4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# p9=plot(ok4$Perc.Viol~ok4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# # Both
# p7=plot(ne4$Perc.Viol~ne4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# #grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,nrow=3,ncol=3,top="State Trends")
# 
# 
# # Neither
# p4=plot(wa4$Perc.Viol~wa4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')
# 
# p6=plot(il4$Perc.Viol~il4$YEAR,type="o",col="black",las=2,cex.lab=1.5,xlab='',ylab='Percent of Systems in Violation')



#*************************************


# Create a table displaying slope and p-value for state trends
Trend_table = as.data.frame(matrix(data = NA, nrow=45, ncol=5))
names(Trend_table) = c("State","Slope","P-Value","min_perc","max_perc")

# change text for each row of specific column
Trend_table$State = c("Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Maine","Maryland","Massachusetts","Michigan","Minnesota" ,"Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York" ,"North Carolina", "North Dakota", "Ohio", "Oklahoma" ,"Oregon" ,"Pennsylvania","Rhode Island","South Carolina" ,"South Dakota","Tennessee","Texas","Utah","Vermont" ,"Virginia","Washington","West Virginia","Wisconsin","Wyoming")

#****************************
# Getting non-parametric slope coefficient and p-values
library(trend)
library(rkt) # for Mann-Kendall with missing values
# Trend_table2 = Trend_table
# # Because tn4 has only 2 rows the Mann_kendall doesn't work
# # So adding fake data to make it work and then going to replace with real data after
# tnew = as.data.frame(matrix(data = NA, nrow=1, ncol=5))
# names(tnew) = c("YEAR","State","Viol.Freq","Tot_Systems","Perc.Viol")
# tnew = as.data.frame(tnew)
# tnew[1,1] = 2018
# tnew[1,2] = "Tennessee"
# tnew[1,3] = 1
# tnew[1,4] = 869
# tnew[1,5] = 0.09
# tnew$Viol.Freq = as.integer(tnew$Viol.Freq)
# tn4 = rbind(tn4,tnew)
# ut4 = rbind(ut4,tnew)

# Make list of all dataframes to use in for-loop
st = list(az4,ar4,ca4,co4,ct4,de4,fl4,ga4,id4,il4,IN4,ia4,ks4,ky4,me4,md4,ma4,mi4,mn4,mo4,mt4,ne4,nv4,nh4,nj4,nm4,ny4,nc4,nd4,oh4,ok4,or4,pa4,ri4,sc4,sd4,tn4,tx4,ut4,vt4,va4,wa4,wv4,wi4,wy4)

for(i in 1:length(st)){
m1 = lm(sapply(st[i],'[[',5)~as.numeric(sapply(st[i],'[[',1)))
slope = summary(m1)$coefficients[2,1] 
pvalue= as.numeric(rkt(as.numeric(sapply(st[i],'[[',1)), sapply(st[i],'[[',5))[1]) # MannKendall for missing values
min = min(sapply(st[i],'[[',5))
max = max(sapply(st[i],'[[',5))
Trend_table[i,2]=slope
Trend_table[i,3]=pvalue
Trend_table[i,4]=min
Trend_table[i,5]=max
}

# write.csv(Trend_table, file = paste0(m_dir,"Projects/SDWIS/State_Temporal_Trends_Table.csv"), row.names=F)








```




# State % SW 
```{r}

PWS_ALL = read.csv(paste0(m_dir,"Projects/SDWIS/PWS_ALL/All_PWS.csv"))


# Create New Column with GW.or.SW

PWS_ALL$GW.or.SW <- NA
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Ground water"] <- "Groundwater" 
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Ground water purchased"] <- "Groundwater" 
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Ground water under influence of surface water"] <- "Surface water" 
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Purchased ground water under influence of surface water"] <- "Surface water" 
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Surface water"] <- "Surface water" 
PWS_ALL$GW.or.SW[PWS_ALL$Primary.Source=="Surface water purchased"] <- "Surface water" 

# Subset out State
st = PWS_ALL[PWS_ALL$Primacy.Agency== "Ohio" &
               PWS_ALL$Activity.Status=="Active",]
st_uniq = as.data.frame(unique(st[,c("PWSID","GW.or.SW")]))

levels(factor(st_uniq$Primary.Source))
levels(factor(st_uniq$GW.or.SW))

SW = st_uniq[st_uniq$GW.or.SW=="Surface water" ,]
100*nrow(SW)/nrow(st_uniq)

# % SW Systems 
# 7.635285 % Louisiana
# 1.24792 % for Mississippi
# 40.61433 % for Alabama
# 15.3475 % for CA
# 20.97589 % for TX
# 6.621651 % for OH



```


# Enforcement Actions
* The data in the standard reports only has the most recent enforcement action associated with a given violation. You can also see if it has been returned to compliance from the compliance status field. Direct database access gives you the full list of enforcement actions, but those queries get notably slower the more systems and violations you ask for.
* ECHO has a slightly more complete (5 years) enforcement history. Note the PWSID in the link. Look for the SDWA violations and enforcement actions (5 years only)
* https://echo.epa.gov/detailed-facility-report?fid=TX0230002&sys=SDWIS#
* The list of formal enforcement actions as designated by OECA is here:
* https://www.epa.gov/sites/production/files/2015-09/documents/drinking-water-erp-2009.pdf

```{r}




# This lists all the types of enforcement actions
levels(factor(SDWIS94$Enforcement.Action.Description))
levels(factor(SDWIS94$Enforcement.Action.Type.Code))

# Get list of PWSIDs for systems with long duration of violations
# View(PWS_Dur_MaxQuar)

# These some of the many systems that have all had persistent violatios > 10 years:
# TX0230002, KS2015501, MT0000179, OK2003703

# Check data of most recent violation
temp = SDWIS94[SDWIS94$PWSID=="TX0230002",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX0480011",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX1520185",c("YEAR","QUARTER")] # 2016Q3
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX1530005",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX1350001",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="KS2015501",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="MT0000179",c("YEAR","QUARTER")] # 2011Q3
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="OK2003703",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX1650022",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="TX0960003",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])

temp = SDWIS94[SDWIS94$PWSID=="OK2000908",c("YEAR","QUARTER")] # 2016Q4
head(temp[order(-temp$YEAR,-temp$QUARTER),])


#*****************************************
# Has it been returned to compliance?


# Subset out specific years and quarter
SDWIS16Q4 = SDWIS94[SDWIS94$YEAR == 2016 & SDWIS94$QUARTER == 4,]
SDWIS16Q3 = SDWIS94[SDWIS94$YEAR == 2016 & SDWIS94$QUARTER == 3,]
SDWIS11Q3 = SDWIS94[SDWIS94$YEAR == 2011 & SDWIS94$QUARTER == 3,]


levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX0230002","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX0480011","Compliance.Status"]))# Known
levels(factor(SDWIS16Q3[SDWIS16Q3$PWSID=="TX1520185","Compliance.Status"]))# Returned to Compliance
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX1530005","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX1350001","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="KS2015501","Compliance.Status"]))# Known
levels(factor(SDWIS11Q3[SDWIS11Q3$PWSID=="MT0000179","Compliance.Status"]))# Returned to Compliance
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="OK2003703","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX1650022","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX0960003","Compliance.Status"]))# Known
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="OK2000908","Compliance.Status"]))# Known



# Check Enforcement Info
levels(factor(SDWIS16Q4[SDWIS16Q4$PWSID=="TX0960003","Enforcement.Action.Description"]))
# "State Public Notification requested"

#********************************************************************

# Calculate % of violations with no enformcement actions "-"
100*nrow(SDWIS94[SDWIS94$Enforcement.Action.Description=="-",])/nrow(SDWIS94)
# 3.899322%
# This is in contrast to what is in NRDS report (Fedinick et al 2017)

100*nrow(SDWIS94[SDWIS94$Enforcement.Action.Type.Code=="-",])/nrow(SDWIS94)
#3.899322%

# See if can filter out "FORMAL" enforcement actions




```

#Facilities per PWS
```{r}

fac16 = readRDS(paste0(m_dir,"Projects/SDWIS/Facilities_All_2016/SDWIS_Facilities_ALL_2016.rds")) 
names(fac16)[1] = "PWSID"

# count number of facilities per PWS
library(dplyr)
pws.fac = fac16 %>% group_by(PWSID) %>% summarise(facility_count = n_distinct(Facility.Id))

# Average Number of facilities per PWS
mean(pws.fac$facility_count) # 3.287224

# Median Number of facilities per PWS
median(pws.fac$facility_count) # 2

# Average number of facilities per PWS for each state
pws.fac.state = fac16 %>% group_by(PWSID,Primacy.Agency) %>% summarise(facility_count = n_distinct(Facility.Id))

mean.pws.fac.state = pws.fac.state %>% group_by(Primacy.Agency) %>% summarise(Mean_Fac_Count = mean(facility_count))



```




# P-VALUES FOR REGRESSIONS
```{r P-VALUES}

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# Overall Temporal Trends
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
library(lattice)
library(Kendall) # Mann-Kendal Test
library(trend)
#**********************************************************

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of Systems in Violation over Time (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(viol94_pws$Freq~as.numeric(viol94_pws$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05101607
p.value # 0.1544116
summary(m1) # equation: y=2.7*x+502

plot(m1)
#looks relatively normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# looks  normal
shapiro.test(E.m1)
# p-value = 0.568
MannKendall(viol94_pws$Freq) # tau = 0.179, 2-sided pvalue =0.24488

# log transformed
m1 = lm(log(viol94_pws$Freq)~as.numeric(viol94_pws$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.05430607
p.value # 0.1473604 (same result)
MannKendall(log(viol94_pws$Freq)) # tau = 0.179, 2-sided pvalue =0.24488

# Sen's Slope
library(trend)
ts = ts(viol94_pws[,2],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 3.1875


# Number of Systems in Violation over Time (1994-2009)
viol94_pws$YEAR = as.numeric(as.character(viol94_pws$YEAR))
viol94_pws09 = viol94_pws[viol94_pws$YEAR <= 2009,]
m1 = lm(viol94_pws09$Freq~as.numeric(viol94_pws09$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.5219807
p.value # 0.0009461427
summary(m1) # equation: y=10*x+-19529.6

plot(m1)
#looks  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# looks  relatively normal
shapiro.test(E.m1)
# p-value = 0.6342
MannKendall(viol94_pws09$Freq) # tau = 0.544, 2-sided pvalue =0.003922

# log transformed
m1 = lm(log(viol94_pws09$Freq)~as.numeric(viol94_pws09$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.5061396
p.value # 0.001201805 (same result)

# Sen's Slope
ts = ts(viol94_pws09[,2],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 10.619

# Number of Systems in Violation over Time (2010-2016)
viol94_pws$YEAR = as.numeric(as.character(viol94_pws$YEAR))
viol94_pws10 = viol94_pws[viol94_pws$YEAR >= 2009,]
m1 = lm(viol94_pws10$Freq~as.numeric(viol94_pws10$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.722247
p.value # 0.004657921
summary(m1) # equation: y=-22.202*x+45229.167

plot(m1)
#looks somewhat normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# looks  a little skewed
shapiro.test(E.m1)
# p-value = 0.1906
MannKendall(viol94_pws10$Freq) # tau = -0.714, 2-sided pvalue =0.018741

# log transformed
m1 = lm(log(viol94_pws10$Freq)~as.numeric(viol94_pws10$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.5783929
p.value # 0.02880672  (same result)

# Sen's Slope
ts = ts(viol94_pws10[,2],start=c(2010,1))
plot.ts(ts)
sens.slope(ts) # -23.0119

plot(viol94_pws09$Freq ~ viol94_pws09$YEAR)
abline(lm(viol94_pws09$Freq ~ viol94_pws09$YEAR))



#**********************************************************
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of Systems in Violation over Time (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(viol94_pws$perc_new~as.numeric(viol94_pws$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.2484965
p.value # 0.009030944
summary(m1) # equation: y=0.003512*x+-6.708646

plot(m1)
#looks  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# looks  relatively normal
shapiro.test(E.m1)
# p-value = 0.6848
MannKendall(viol94_pws$perc_new) # tau = 0.304, 2-sided pvalue =0.044729

# log transformed
m1 = lm(log(viol94_pws$perc_new)~as.numeric(viol94_pws$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.2697134
p.value # 0.006505051  (same result)

# Sen's Slope
ts = ts(viol94_pws[,14],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0033

# % of Systems in Violation over Time (1994-2009)
m1 = lm(viol94_pws09$perc_new~as.numeric(viol94_pws09$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6765201
p.value # 0.0000558788
summary(m1) # equation: y=0.008893*x+-17.469337

MannKendall(viol94_pws09$perc_new) #tau = 0.583, 2-sided pvalue =0.0018928

# Sen's Slope
ts = ts(viol94_pws09[,14],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0091


# % of Systems in Violation over Time (2009-2016)
viol94_pws09_16 = viol94_pws[viol94_pws$YEAR >= 2009,]

m1 = lm(viol94_pws09_16$perc_new~as.numeric(viol94_pws09_16$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6331441
p.value # 0.01114011
summary(m1) # equation: y=-0.009399*x+19.263712

MannKendall(viol94_pws09_16$perc_new) #tau = 0.583, 2-sided pvalue pvalue =0.018741

# Sen's Slope
ts = ts(viol94_pws09_16[,14],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # -0.0136

#**********************************************************
#**********************************************************
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of People Served (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pop94 = Pop_Violated[Pop_Violated$YEAR >= 1994 & Pop_Violated$YEAR <=2016,]
m1 = lm(pop94$Pop_Violated~as.numeric(pop94$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # -0.03587
p.value # 0.6306
summary(m1) # equation: y= -8370 *x+17511370

plot(pop94$Pop_Violated ~ pop94$YEAR)
abline(lm(pop94$Pop_Violated ~ pop94$YEAR))

plot(m1)
#somewhat  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# has two peaks
shapiro.test(E.m1)
# p-value = 0.001236
MannKendall(pop94$Pop_Violated) # tau = -0.138, 2-sided pvalue =0.36921

# log transformed
m1 = lm(log(pop94$Pop_Violated)~as.numeric(pop94$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # -0.008360905
p.value # 0.3761436 (same result)

# Sen's Slope
ts = ts(pop94[,2],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # -13704.4667

# Number of People Served (1998-2014)
pop98 = Pop_Violated[Pop_Violated$YEAR >= 1998 & Pop_Violated$YEAR <=2014,]
m1 = lm(pop98$Pop_Violated~as.numeric(pop98$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.4483538
p.value # 0.001962005
summary(m1) # equation: y= -75004*x+151136401

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of People Served without Spikey systems (>50%) (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
library(dplyr)
no_spikes_pop <- no_spikes %>% dplyr::group_by(YEAR) %>% summarize(Pop_Violated = sum(Pop_Violated), Perc_USPop = sum(weighted.USpop))

pop94 = no_spikes_pop[no_spikes_pop$YEAR >= 1994 & no_spikes_pop$YEAR <=2016,]
m1 = lm(pop94$Pop_Violated~as.numeric(pop94$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.3708287
p.value # 0.001215747
summary(m1) # equation: y= -14398*x+29225136

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# one small extra peak
shapiro.test(E.m1)
# p-value = 0.5876
MannKendall(pop94$Pop_Violated) # tau = -0.455, 2-sided pvalue =0.0026057

# log transformed
m1 = lm(log(pop94$Pop_Violated)~as.numeric(pop94$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.3533804
p.value # 0.001649022 (same result)

# Sen's Slope
ts = ts(pop94[,2],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # -16892.0588

#************************************************
# % of People Served (1994-2016)
m1 = lm(pop94$Perc_USPop~as.numeric(pop94$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # -0.006606
p.value # 0.3655
summary(m1) # equation: y= -0.005396 *x+11.070402

# % of People Served (1998-2014)
m1 = lm(pop98$Perc_USPop~as.numeric(pop98$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.4819691
p.value # 0.001193422
summary(m1) # equation: y= -0.027852*x+56.106335


#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# Repeat Violator & Average Duration Trends
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Repeat Violator (1994 to 2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rept = mdfr94[mdfr94$variable == "Repeat Violators",]
m1 = lm(rept$value~as.numeric(rept$YEAR2))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6606903
p.value # 0.000001482948
summary(m1) # equation: y= 7.615*x+146.970 

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# one small extra peak
shapiro.test(E.m1)
# p-value = 0.5564
MannKendall(rept$value) # tau = 0.61, 2-sided pvalue =0.000052929

# log transformed
m1 = lm(log(rept$value)~as.numeric(rept$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6730254
p.value # 0.0000009975889 (same result)

# Sen's Slope
ts = ts(rept[,3],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 8.8824

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Average Duration (1994-1996 to 2014-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(yr3_Avg_dur$mean_durY~as.numeric(yr3_Avg_dur$start_yr))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.7898113
p.value # 0.00000004501465
summary(m1) # equation: y= 0.012788*x+-25.178201 

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# one small extra peak
shapiro.test(E.m1)
# p-value = 0.2834
MannKendall(yr3_Avg_dur$mean_durY) # tau = 0.81, 2-sided pvalue =0.00000035763

# log transformed
m1 = lm(log(yr3_Avg_dur$mean_durY)~as.numeric(yr3_Avg_dur$start_yr))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.8274484
p.value # 0.000000006774224 (same result)

# Sen's Slope
ts = ts(yr3_Avg_dur[,4],start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0139

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# GW vs SW Trends
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
gw = uniq_pws94[uniq_pws94$GW.or.SW == "Groundwater",]
gw_y = as.data.frame(table(gw$YEAR)) 
names(gw_y)[1] = "YEAR"

sw = uniq_pws94[uniq_pws94$GW.or.SW == "Surface water",]
sw_y = as.data.frame(table(sw$YEAR)) 
names(sw_y)[1] = "YEAR"

# Number of GW Violations (1994-2016)
m1 = lm(gw_y$Freq~as.numeric(gw_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.1207319
p.value # 0.05800089
summary(m1) # equation: y= 3.727*x+465.534 

# Number of GW Violations (1994-2009)
gw_y$YEAR = as.numeric(as.character(gw_y$YEAR))
gw_y09 = gw_y[gw_y$YEAR <=2009,]
m1 = lm(gw_y09$Freq~as.numeric(gw_y09$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.5854483
p.value # 0.0003348292
summary(m1) # equation: y= 11.241*x-21991.715 

# Number of GW Violations (2009-2016)
gw_y$YEAR = as.numeric(as.character(gw_y$YEAR))
gw_y16 = gw_y[gw_y$YEAR >=2009,]
m1 = lm(gw_y16$Freq~as.numeric(gw_y16$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.7277237
p.value # 0.00437818
summary(m1) # equation: y= -22.321*x+45452.000 

#***********************************************
# Number of SW Violations (1994-2016)
m1 = lm(sw_y$Freq~as.numeric(sw_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.7306943
p.value # 0.0000001256915
summary(m1) # equation: y= -1.0099*x+36.4664  

#***********************************************
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of GW Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(GW_p$value~as.numeric(GW_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.3410596
p.value # 0.002036428
summary(m1) # equation: y= 0.004802*x+0.292616 

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# normal
shapiro.test(E.m1)
# p-value = 0.7641
MannKendall(GW_p$value) # tau = 0.352, 2-sided pvalue =0.020119

# log transformed
m1 = lm(log(GW_p$value)~as.numeric(GW_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.3667701
p.value # 0.001305924 (same result)

# Sen's Slope
ts = ts(GW_p$value,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0045

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of SW Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(SW_p$value~as.numeric(SW_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.7470755
p.value # 0.00000006443186
summary(m1) # equation: y= -0.0078940*x+0.2663018  

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# normal
shapiro.test(E.m1)
# p-value = 0.6137
MannKendall(SW_p$value) # tau = -0.676, 2-sided pvalue =0.0000071297

# log transformed
m1 = lm(log(SW_p$value)~as.numeric(SW_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.7799518
p.value # 0.00000001466453 (same result)

# Sen's Slope
ts = ts(SW_p$value,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # -0.0076

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# PWS Type Trends
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

cws = uniq_pws94[uniq_pws94$PWS.Type == "Community water system",]
cws_y = as.data.frame(table(cws$YEAR)) 
names(cws_y)[1] = "YEAR"

ncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system" | uniq_pws94$PWS.Type == "Non-Transient non-community system",]
ncws_y = as.data.frame(table(ncws$YEAR)) 
names(ncws_y)[1] = "YEAR"

tncws = uniq_pws94[uniq_pws94$PWS.Type == "Transient non-community system",]
tncws_y = as.data.frame(table(tncws$YEAR)) 
names(tncws_y)[1] = "YEAR"

ntncws = uniq_pws94[uniq_pws94$PWS.Type == "Non-Transient non-community system",]
ntncws_y = as.data.frame(table(ntncws$YEAR)) 
names(ntncws_y)[1] = "YEAR"

# Number of CWS Violations (1994-2016)
m1 = lm(cws_y$Freq~as.numeric(cws_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # -0.04475313
p.value # 0.8126
summary(m1) # equation: y= -0.0078940*x+0.2663018  

# Sen's Slope
ts = ts(cws_y$Freq,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0952

# Number of non-CWS Violations (1994-2016)
m1 = lm(ncws_y$Freq~as.numeric(ncws_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.06711687
p.value # 0.1229628
summary(m1) # equation: y= 2.603*x+-4885.200  

# Number of non-CWS Violations (1994-2009)
ncws_y$YEAR = as.numeric(as.character(ncws_y$YEAR))
ncws_y09 = ncws_y[ncws_y$YEAR <= 2009,]
m1 = lm(ncws_y09$Freq~as.numeric(ncws_y09$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6675648
p.value # 0.00006799209
summary(m1) # equation: y= 10.222*x+-20123.638   


##########
# cws_p = pws_type_yr_perc2[pws_type_yr_perc2$PWS.Type == "Community water system",]

cws_p = merge(cws_y,invent_PWS_TYPE[,c("YEAR","TotSys.CWS")])
cws_p$perc_viol = 100*cws_p$Freq/cws_p$TotSys.CWS

ncws_p = merge(ncws_y,invent_PWS_TYPE[,c("YEAR","TotSys.NTNCWS","TotSys.TNCWS")])
ncws_p$perc_viol = 100*ncws_p$Freq/(ncws_p$TotSys.NTNCWS+ncws_p$TotSys.TNCWS)

tncws_p = merge(tncws_y,invent_PWS_TYPE[,c("YEAR","TotSys.TNCWS")])
tncws_p$perc_viol = 100*tncws_p$Freq/(tncws_p$TotSys.TNCWS)

ntncws_p = merge(ntncws_y,invent_PWS_TYPE[,c("YEAR","TotSys.NTNCWS")])
ntncws_p$perc_viol = 100*ntncws_p$Freq/(ntncws_p$TotSys.NTNCWS)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of CWS Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(cws_p$perc_viol~as.numeric(cws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.0888524
p.value # 0.09064657
summary(m1) # equation: y= 0.0016106*x+0.3668679   
plot(cws_p$perc_viol~as.numeric(cws_p$YEAR))

plot(m1)
#  normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# normal
shapiro.test(E.m1)
# p-value = 0.9925
MannKendall(cws_p$perc_viol) # tau = 0.217, 2-sided pvalue =0.15382

# log transformed
m1 = lm(log(cws_p$perc_viol)~as.numeric(cws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.0917935
p.value # 0.08699113 (same result)

# Sen's Slope
ts = ts(cws_p$perc_viol,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0015


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of TNCWS Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(tncws_p$perc_viol~as.numeric(tncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.03690414
p.value # 0.1890103
summary(m1) # equation: y= 0.002241*x+0.265819   

plot(tncws_p$perc_viol~as.numeric(tncws_p$YEAR))

plot(m1)
#  relatively normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# 2 humps
shapiro.test(E.m1)
# p-value = 0.1959
MannKendall(tncws_p$perc_viol) # tau = 0.225, 2-sided pvalue =0.13914

# log transformed
m1 = lm(log(tncws_p$perc_viol)~as.numeric(tncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2
p.value 

# Sen's Slope
ts = ts(tncws_p$perc_viol,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0026

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of NTNCWS Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(ntncws_p$perc_viol~as.numeric(ntncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.6580505
p.value # 0.000001611315
summary(m1) # equation: y= 0.014604*x+0.225445   

plot(ntncws_p$perc_viol~as.numeric(ntncws_p$YEAR))

plot(m1)
#  relatively normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
#  relatively normal
shapiro.test(E.m1)
# p-value = 0.6294
MannKendall(ntncws_p$perc_viol) # tau = 0.581, 2-sided pvalue =0.00011528

# log transformed
m1 = lm(log(ntncws_p$perc_viol)~as.numeric(ntncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2
p.value 

# Sen's Slope
ts = ts(ntncws_p$perc_viol,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.015


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# % of non-CWS Violations (1994-2016)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
m1 = lm(ncws_p$perc_viol~as.numeric(ncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.2155898
p.value # 0.01482811
summary(m1) # equation: y= 0.004445*x+-8.599737 
plot(ncws_p$perc_viol~as.numeric(ncws_p$YEAR))

plot(m1)
#  somewhat normal
E.m1 <- rstandard(m1)
densityplot(E.m1)
# little extra hump
shapiro.test(E.m1)
# p-value = 0.426
MannKendall(ncws_p$perc_viol) # tau = 0.328, 2-sided pvalue =0.030337

# log transformed
m1 = lm(log(ncws_p$perc_viol)~as.numeric(ncws_p$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.2480563
p.value # 0.009091963 (same result)

# Sen's Slope
ts = ts(ncws_p$perc_viol,start=c(1994,1))
plot.ts(ts)
sens.slope(ts) # 0.0046

#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# Owner Type Trends
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
levels(factor(uniq_pws94$Owner.Type))

fed = uniq_pws94[uniq_pws94$Owner.Type == "Federal government",]
local = uniq_pws94[uniq_pws94$Owner.Type == "Local government",]
nat = uniq_pws94[uniq_pws94$Owner.Type == "Native American",]
priv = uniq_pws94[uniq_pws94$Owner.Type == "Private",]
pub = uniq_pws94[uniq_pws94$Owner.Type == "Public/Private",]
stat = uniq_pws94[uniq_pws94$Owner.Type == "State government",]

fed_y = as.data.frame(table(fed$YEAR)) 
local_y = as.data.frame(table(local$YEAR)) 
nat_y = as.data.frame(table(nat$YEAR)) 
priv_y = as.data.frame(table(priv$YEAR)) 
pub_y = as.data.frame(table(pub$YEAR)) 
stat_y = as.data.frame(table(stat$YEAR)) 

names(fed_y)[1] = "YEAR"
names(local_y)[1] = "YEAR"
names(nat_y)[1] = "YEAR"
names(priv_y)[1] = "YEAR"
names(pub_y)[1] = "YEAR"
names(stat_y)[1] = "YEAR"


# Number of fed gov Violations (1994-2016)
m1 = lm(fed_y$Freq~as.numeric(fed_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 
p.value # 0.1601497
# NOT significant

# Number of local gov Violations (1994-2016)
m1 = lm(local_y$Freq~as.numeric(local_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.4753898
p.value # 0.0001641776
summary(m1) # equation: y= -1.7164*x+154.8142 
# Yes significant
#View(local_y)


# Number of native gov Violations (1994-2016)
m1 = lm(nat_y$Freq~as.numeric(nat_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 
p.value
# NOT significant

# Number of private Violations (1994-2016)
m1 = lm(priv_y$Freq~as.numeric(priv_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # 0.2833623
p.value # 0.005247082
summary(m1) # equation: y=  4.503*x+314.486 
# YES significant
#View(priv_y)

# Number of public/private Violations (1994-2016)
m1 = lm(pub_y$Freq~as.numeric(pub_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 
p.value
# NOT significant

# Number of state gov Violations (1994-2016)
m1 = lm(stat_y$Freq~as.numeric(stat_y$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 
p.value
# NOT significant

#*************************************************************
# POPULATION REGRESSION
#*************************************************************

Pop_Violated

# Number of People Served (1994-2016)
m1 = lm(Pop_Violated$Pop_Violated~as.numeric(Pop_Violated$YEAR))
m1.sum = summary(m1)
r2 = m1.sum$adj.r.squared # extracts adjusted R squared
p.value = m1.sum$coefficients[2,4] # extracts p value
r2 # -0.03587233
p.value # 0.6306101
summary(m1) # equation: y= -1.7164*x+154.8142 



```

# TOC FIGURE
```{r TOC FIGURE}

# Make Plot
p=ggplot(data=viol94_pws, aes(x=YEAR,y=perc_new, group=1))+
  geom_line(size=1.1)+
  geom_point(size=4)+#,shape=1)+
  labs(x="",y="Percent of Systems in Violation")+
  scale_y_continuous(limits=c(0,0.5),breaks=seq(0,0.5,by=0.05))+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  theme(axis.title=element_text(size=20))+
  theme(axis.text=element_text(size=15))+
  theme(panel.background = element_blank())+ # remove grey background
  theme(axis.line=element_line()) # adds axis lines

# add transparent background
p <- p + theme(
    panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
    panel.grid.minor = element_blank(), 
    panel.grid.major = element_blank(),
    plot.background = element_rect(fill = "transparent",colour = NA)
)

#Export Figure
setwd("D:/Figures") # this is path where figure will be exported
png('TOC_fig2.png',width=8,height=5,units="in",res=300,bg = "transparent")
print(p)
dev.off()




```




# Testing States
```{r}

# Checking if the numbers match the
#EWG Tap Water Database numbers for nitrate
#https://www.ewg.org/tapwater/contaminant.php?contamcode=1040#.WXonW4jyvcs
# Looks like they are pretty close matches.  

OH = SDWIS[SDWIS$Primacy.Agency == "Ohio",]
OH2010 = OH[OH$YEAR >=2010 & OH$YEAR <= 2015,]
nrow(OH2010) # 34, total violations
nrow(as.data.frame(unique(OH2010$PWSID))) # 15, uniq Systems


OH2015 = OH[OH$YEAR ==2015,]
nrow(OH2015) # 4

TX = SDWIS[SDWIS$Primacy.Agency == "Texas",]
TX2010 = TX[TX$YEAR >=2010 & TX$YEAR <= 2015,]
nrow(TX2010) # 1428, total violations
nrow(as.data.frame(unique(TX2010$PWSID))) # 141, uniq Systems


CA = SDWIS[SDWIS$Primacy.Agency == "California",]
CA2010 = CA[CA$YEAR >=2010 & CA$YEAR <= 2015,]
nrow(CA2010) # 1428, total violations
nrow(as.data.frame(unique(CA2010$PWSID))) # 227, uniq Systems


```


# Temporal Compilation Table
* Number of systems in violation each year
* total Number of violations each year
* Number of active systems each year
* % of systems in violation each year
* Total people served by violators each year
```{r}

names(Pop_Violated) = c("YEAR","Population_Served","PopServed_Percent_UsPop")

viol_temp = viol94_pws[,c('YEAR','Freq','perc_new','Total_Syst','Total_PopServed')]
names(viol_temp) = c('YEAR','Systems_in_Violation','Perc_in_Violation','Total_Active_Systems','Total_Pop_Served_Active_Systems')

Temporal_Table = merge(viol_temp,Pop_Violated,by="YEAR")

#write.csv(Temporal_Table, file = paste0(m_dir,"Projects/SDWIS/Data_ES&T/SDWIS_NO3_Violations_Over_Time_1994-2016_FINAL.csv"), row.names=F)

```

